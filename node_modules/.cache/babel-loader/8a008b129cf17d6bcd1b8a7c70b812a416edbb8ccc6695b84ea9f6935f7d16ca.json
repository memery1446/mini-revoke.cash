{"ast":null,"code":"import { BrowserProvider, Contract } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n  const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n  let approvals = [];\n  for (let tokenAddress of tokenContracts) {\n    const contract = new Contract(tokenAddress, abi, provider);\n    const spenderAddresses = [\"0xMarketplace1\",\n    // Example marketplace or contract using approvals\n    \"0xMarketplace2\"]; // ✅ Replace with known spender addresses\n\n    for (let spender of spenderAddresses) {\n      const allowance = await contract.allowance(ownerAddress, spender);\n      if (allowance > 0) {\n        approvals.push({\n          contract: tokenAddress,\n          type: \"ERC-20\",\n          spender: spender,\n          amount: allowance.toString()\n        });\n      }\n    }\n  }\n  console.log(\"✅ ERC-20 Approvals Fetched:\", approvals);\n  return approvals;\n}\n\n/** Function to batch revoke ERC-20 approvals */\nexport async function batchRevokeERC20Approvals(tokenContracts, signer) {\n  const abi = [\"function approve(address spender, uint256 amount)\"];\n  console.log(\"⏳ Revoking multiple ERC-20 approvals...\");\n  for (let tokenAddress of tokenContracts) {\n    const contract = new Contract(tokenAddress, abi, signer);\n    const tx = await contract.approve(\"0x0000000000000000000000000000000000000000\", 0); // ✅ Set allowance to zero\n    await tx.wait();\n    console.log(`✅ ERC-20 Approval Revoked for: ${tokenAddress}`);\n  }\n  console.log(\"✅ All ERC-20 approvals revoked!\");\n}","map":{"version":3,"names":["BrowserProvider","Contract","getERC20Approvals","tokenContracts","ownerAddress","provider","abi","approvals","tokenAddress","contract","spenderAddresses","spender","allowance","push","type","amount","toString","console","log","batchRevokeERC20Approvals","signer","tx","approve","wait"],"sources":["/Users/markemery/mini.revoke/src/utils/erc20Approvals.js"],"sourcesContent":["import { BrowserProvider, Contract } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n    const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n\n    let approvals = [];\n\n    for (let tokenAddress of tokenContracts) {\n        const contract = new Contract(tokenAddress, abi, provider);\n        \n        const spenderAddresses = [\n            \"0xMarketplace1\", // Example marketplace or contract using approvals\n            \"0xMarketplace2\"\n        ]; // ✅ Replace with known spender addresses\n\n        for (let spender of spenderAddresses) {\n            const allowance = await contract.allowance(ownerAddress, spender);\n            if (allowance > 0) {\n                approvals.push({\n                    contract: tokenAddress,\n                    type: \"ERC-20\",\n                    spender: spender,\n                    amount: allowance.toString()\n                });\n            }\n        }\n    }\n\n    console.log(\"✅ ERC-20 Approvals Fetched:\", approvals);\n    return approvals;\n}\n\n/** Function to batch revoke ERC-20 approvals */\nexport async function batchRevokeERC20Approvals(tokenContracts, signer) {\n    const abi = [\"function approve(address spender, uint256 amount)\"];\n\n    console.log(\"⏳ Revoking multiple ERC-20 approvals...\");\n\n    for (let tokenAddress of tokenContracts) {\n        const contract = new Contract(tokenAddress, abi, signer);\n\n        const tx = await contract.approve(\"0x0000000000000000000000000000000000000000\", 0); // ✅ Set allowance to zero\n        await tx.wait();\n\n        console.log(`✅ ERC-20 Approval Revoked for: ${tokenAddress}`);\n    }\n\n    console.log(\"✅ All ERC-20 approvals revoked!\");\n}\n\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,QAAQ,QAAQ,QAAQ;;AAElD;AACA,OAAO,eAAeC,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAC5E,MAAMC,GAAG,GAAG,CAAC,2EAA2E,CAAC;EAEzF,IAAIC,SAAS,GAAG,EAAE;EAElB,KAAK,IAAIC,YAAY,IAAIL,cAAc,EAAE;IACrC,MAAMM,QAAQ,GAAG,IAAIR,QAAQ,CAACO,YAAY,EAAEF,GAAG,EAAED,QAAQ,CAAC;IAE1D,MAAMK,gBAAgB,GAAG,CACrB,gBAAgB;IAAE;IAClB,gBAAgB,CACnB,CAAC,CAAC;;IAEH,KAAK,IAAIC,OAAO,IAAID,gBAAgB,EAAE;MAClC,MAAME,SAAS,GAAG,MAAMH,QAAQ,CAACG,SAAS,CAACR,YAAY,EAAEO,OAAO,CAAC;MACjE,IAAIC,SAAS,GAAG,CAAC,EAAE;QACfL,SAAS,CAACM,IAAI,CAAC;UACXJ,QAAQ,EAAED,YAAY;UACtBM,IAAI,EAAE,QAAQ;UACdH,OAAO,EAAEA,OAAO;UAChBI,MAAM,EAAEH,SAAS,CAACI,QAAQ,CAAC;QAC/B,CAAC,CAAC;MACN;IACJ;EACJ;EAEAC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEX,SAAS,CAAC;EACrD,OAAOA,SAAS;AACpB;;AAEA;AACA,OAAO,eAAeY,yBAAyBA,CAAChB,cAAc,EAAEiB,MAAM,EAAE;EACpE,MAAMd,GAAG,GAAG,CAAC,mDAAmD,CAAC;EAEjEW,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;EAEtD,KAAK,IAAIV,YAAY,IAAIL,cAAc,EAAE;IACrC,MAAMM,QAAQ,GAAG,IAAIR,QAAQ,CAACO,YAAY,EAAEF,GAAG,EAAEc,MAAM,CAAC;IAExD,MAAMC,EAAE,GAAG,MAAMZ,QAAQ,CAACa,OAAO,CAAC,4CAA4C,EAAE,CAAC,CAAC,CAAC,CAAC;IACpF,MAAMD,EAAE,CAACE,IAAI,CAAC,CAAC;IAEfN,OAAO,CAACC,GAAG,CAAC,kCAAkCV,YAAY,EAAE,CAAC;EACjE;EAEAS,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;AAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}