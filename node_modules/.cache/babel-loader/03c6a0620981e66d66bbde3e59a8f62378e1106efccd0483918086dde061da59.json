{"ast":null,"code":"import { BrowserProvider, Contract } from \"ethers\"; // ✅ Correct import\n\n/** Function to get ERC-1155 Approvals */\nexport async function getERC1155Approvals(nftContractAddress, ownerAddress, provider) {\n  const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"];\n  const contract = new Contract(nftContractAddress, abi, provider);\n  const operatorAddress = \"0x0000000000000000000000000000000000000000\"; // Replace later with actual marketplace\n\n  const isApproved = await contract.isApprovedForAll(ownerAddress, operatorAddress);\n  console.log(`✅ ERC-1155 Approval for All: ${isApproved}`);\n  return isApproved;\n}\n\n/** Function to revoke ERC-1155 Approvals */\nexport async function revokeERC1155Approval(nftContractAddress) {\n  const provider = new BrowserProvider(window.ethereum); // ✅ Corrected reference\n  const signer = await provider.getSigner();\n  const abi = [\"function setApprovalForAll(address operator, bool approved)\"];\n  const contract = new Contract(nftContractAddress, abi, signer);\n  const tx = await contract.setApprovalForAll(\"0x0000000000000000000000000000000000000000\", false); // Revoke approval\n  await tx.wait();\n  console.log(`✅ ERC-1155 Approval Revoked`);\n}","map":{"version":3,"names":["BrowserProvider","Contract","getERC1155Approvals","nftContractAddress","ownerAddress","provider","abi","contract","operatorAddress","isApproved","isApprovedForAll","console","log","revokeERC1155Approval","window","ethereum","signer","getSigner","tx","setApprovalForAll","wait"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["import { BrowserProvider, Contract } from \"ethers\"; // ✅ Correct import\n\n/** Function to get ERC-1155 Approvals */\nexport async function getERC1155Approvals(nftContractAddress, ownerAddress, provider) {\n    const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"];\n\n    const contract = new Contract(nftContractAddress, abi, provider);\n    const operatorAddress = \"0x0000000000000000000000000000000000000000\"; // Replace later with actual marketplace\n\n    const isApproved = await contract.isApprovedForAll(ownerAddress, operatorAddress);\n    console.log(`✅ ERC-1155 Approval for All: ${isApproved}`);\n\n    return isApproved;\n}\n\n/** Function to revoke ERC-1155 Approvals */\nexport async function revokeERC1155Approval(nftContractAddress) {\n    const provider = new BrowserProvider(window.ethereum); // ✅ Corrected reference\n    const signer = await provider.getSigner();\n    \n    const abi = [\"function setApprovalForAll(address operator, bool approved)\"];\n    const contract = new Contract(nftContractAddress, abi, signer);\n\n    const tx = await contract.setApprovalForAll(\"0x0000000000000000000000000000000000000000\", false); // Revoke approval\n    await tx.wait();\n    console.log(`✅ ERC-1155 Approval Revoked`);\n}\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,QAAQ,QAAQ,QAAQ,CAAC,CAAC;;AAEpD;AACA,OAAO,eAAeC,mBAAmBA,CAACC,kBAAkB,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAClF,MAAMC,GAAG,GAAG,CAAC,gFAAgF,CAAC;EAE9F,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACE,kBAAkB,EAAEG,GAAG,EAAED,QAAQ,CAAC;EAChE,MAAMG,eAAe,GAAG,4CAA4C,CAAC,CAAC;;EAEtE,MAAMC,UAAU,GAAG,MAAMF,QAAQ,CAACG,gBAAgB,CAACN,YAAY,EAAEI,eAAe,CAAC;EACjFG,OAAO,CAACC,GAAG,CAAC,gCAAgCH,UAAU,EAAE,CAAC;EAEzD,OAAOA,UAAU;AACrB;;AAEA;AACA,OAAO,eAAeI,qBAAqBA,CAACV,kBAAkB,EAAE;EAC5D,MAAME,QAAQ,GAAG,IAAIL,eAAe,CAACc,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAMC,MAAM,GAAG,MAAMX,QAAQ,CAACY,SAAS,CAAC,CAAC;EAEzC,MAAMX,GAAG,GAAG,CAAC,6DAA6D,CAAC;EAC3E,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACE,kBAAkB,EAAEG,GAAG,EAAEU,MAAM,CAAC;EAE9D,MAAME,EAAE,GAAG,MAAMX,QAAQ,CAACY,iBAAiB,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC,CAAC;EAClG,MAAMD,EAAE,CAACE,IAAI,CAAC,CAAC;EACfT,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}