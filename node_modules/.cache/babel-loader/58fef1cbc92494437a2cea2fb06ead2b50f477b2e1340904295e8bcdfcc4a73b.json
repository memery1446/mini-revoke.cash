{"ast":null,"code":"import { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Correct import\n\nexport async function getERC20Approvals(userAddress) {\n  try {\n    const provider = getProvider();\n    const spenderAddresses = [CONTRACT_ADDRESSES.TK1,\n    // ‚úÖ Token contract itself\n    \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\" // ‚úÖ Test wallet\n    ];\n    if (!userAddress) {\n      throw new Error(\"‚ùå Invalid user address\");\n    }\n    console.log(\"üîç Checking ERC-20 Allowance...\");\n    const approvals = await Promise.all(spenderAddresses.map(async spender => {\n      const contract = new ethers.Contract(CONTRACT_ADDRESSES.TK1, ERC20_ABI, provider);\n      const allowance = await contract.allowance(userAddress, spender);\n      return {\n        spender,\n        allowance: allowance.toString()\n      };\n    }));\n    return approvals;\n  } catch (error) {\n    console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n    throw error;\n  }\n}\nexport async function revokeERC1155Approval(userAddress) {\n  try {\n    const provider = getProvider();\n    const signer = provider.getSigner();\n    const contractAddress = CONTRACT_ADDRESSES.TestERC1155;\n    const erc1155 = new ethers.Contract(contractAddress, [\"function setApprovalForAll(address operator, bool approved) external\"], signer);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üõë Revoking ERC-1155 Approval for:\", operatorAddress);\n    const tx = await erc1155.setApprovalForAll(operatorAddress, false);\n    await tx.wait();\n    console.log(\"‚úÖ ERC-1155 Approval Revoked\");\n  } catch (error) {\n    console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n  }\n}\nexport async function batchRevokeERC1155Approvals(userAddresses) {\n  try {\n    for (const userAddress of userAddresses) {\n      await revokeERC1155Approval(userAddress);\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in batch revocation of ERC-1155 approvals:\", error);\n  }\n}","map":{"version":3,"names":["ethers","getProvider","CONTRACT_ADDRESSES","getERC20Approvals","userAddress","provider","spenderAddresses","TK1","Error","console","log","approvals","Promise","all","map","spender","contract","Contract","ERC20_ABI","allowance","toString","error","revokeERC1155Approval","signer","getSigner","contractAddress","TestERC1155","erc1155","operatorAddress","MockSpender","tx","setApprovalForAll","wait","batchRevokeERC1155Approvals","userAddresses"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Correct import\n\nexport async function getERC20Approvals(userAddress) {\n    try {\n        const provider = getProvider();\n        const spenderAddresses = [\n            CONTRACT_ADDRESSES.TK1, // ‚úÖ Token contract itself\n            \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\" // ‚úÖ Test wallet\n        ];\n\n        if (!userAddress) {\n            throw new Error(\"‚ùå Invalid user address\");\n        }\n\n        console.log(\"üîç Checking ERC-20 Allowance...\");\n        const approvals = await Promise.all(\n            spenderAddresses.map(async (spender) => {\n                const contract = new ethers.Contract(CONTRACT_ADDRESSES.TK1, ERC20_ABI, provider);\n                const allowance = await contract.allowance(userAddress, spender);\n                return {\n                    spender,\n                    allowance: allowance.toString(),\n                };\n            })\n        );\n\n        return approvals;\n    } catch (error) {\n        console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n        throw error;\n    }\n}\n\nexport async function revokeERC1155Approval(userAddress) {\n    try {\n        const provider = getProvider();\n        const signer = provider.getSigner();\n        const contractAddress = CONTRACT_ADDRESSES.TestERC1155;\n        const erc1155 = new ethers.Contract(contractAddress, [\n            \"function setApprovalForAll(address operator, bool approved) external\"\n        ], signer);\n        \n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üõë Revoking ERC-1155 Approval for:\", operatorAddress);\n        \n        const tx = await erc1155.setApprovalForAll(operatorAddress, false);\n        await tx.wait();\n        console.log(\"‚úÖ ERC-1155 Approval Revoked\");\n    } catch (error) {\n        console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n    }\n}\n\nexport async function batchRevokeERC1155Approvals(userAddresses) {\n    try {\n        for (const userAddress of userAddresses) {\n            await revokeERC1155Approval(userAddress);\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in batch revocation of ERC-1155 approvals:\", error);\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,YAAY,CAAC,CAAC;AACtC,SAASC,kBAAkB,QAAQ,mBAAmB,CAAC,CAAC;;AAExD,OAAO,eAAeC,iBAAiBA,CAACC,WAAW,EAAE;EACjD,IAAI;IACA,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;IAC9B,MAAMK,gBAAgB,GAAG,CACrBJ,kBAAkB,CAACK,GAAG;IAAE;IACxB,4CAA4C,CAAC;IAAA,CAChD;IAED,IAAI,CAACH,WAAW,EAAE;MACd,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;IAC7C;IAEAC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,MAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC/BP,gBAAgB,CAACQ,GAAG,CAAC,MAAOC,OAAO,IAAK;MACpC,MAAMC,QAAQ,GAAG,IAAIhB,MAAM,CAACiB,QAAQ,CAACf,kBAAkB,CAACK,GAAG,EAAEW,SAAS,EAAEb,QAAQ,CAAC;MACjF,MAAMc,SAAS,GAAG,MAAMH,QAAQ,CAACG,SAAS,CAACf,WAAW,EAAEW,OAAO,CAAC;MAChE,OAAO;QACHA,OAAO;QACPI,SAAS,EAAEA,SAAS,CAACC,QAAQ,CAAC;MAClC,CAAC;IACL,CAAC,CACL,CAAC;IAED,OAAOT,SAAS;EACpB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZZ,OAAO,CAACY,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACf;AACJ;AAEA,OAAO,eAAeC,qBAAqBA,CAAClB,WAAW,EAAE;EACrD,IAAI;IACA,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;IAC9B,MAAMsB,MAAM,GAAGlB,QAAQ,CAACmB,SAAS,CAAC,CAAC;IACnC,MAAMC,eAAe,GAAGvB,kBAAkB,CAACwB,WAAW;IACtD,MAAMC,OAAO,GAAG,IAAI3B,MAAM,CAACiB,QAAQ,CAACQ,eAAe,EAAE,CACjD,sEAAsE,CACzE,EAAEF,MAAM,CAAC;IAEV,MAAMK,eAAe,GAAG1B,kBAAkB,CAAC2B,WAAW;IACtDpB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEkB,eAAe,CAAC;IAElE,MAAME,EAAE,GAAG,MAAMH,OAAO,CAACI,iBAAiB,CAACH,eAAe,EAAE,KAAK,CAAC;IAClE,MAAME,EAAE,CAACE,IAAI,CAAC,CAAC;IACfvB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC,CAAC,OAAOW,KAAK,EAAE;IACZZ,OAAO,CAACY,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC/D;AACJ;AAEA,OAAO,eAAeY,2BAA2BA,CAACC,aAAa,EAAE;EAC7D,IAAI;IACA,KAAK,MAAM9B,WAAW,IAAI8B,aAAa,EAAE;MACrC,MAAMZ,qBAAqB,CAAClB,WAAW,CAAC;IAC5C;EACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZZ,OAAO,CAACY,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;EAC9E;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}