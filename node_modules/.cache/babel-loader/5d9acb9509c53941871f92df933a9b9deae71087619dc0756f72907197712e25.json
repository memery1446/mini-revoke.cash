{"ast":null,"code":"import { ethers } from \"ethers\";\nexport async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n  const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function getApproved(uint256 tokenId) view returns (address)\"];\n  const contract = new ethers.Contract(nftContractAddress, abi, provider);\n\n  // Replace with the actual marketplace address (e.g., OpenSea, LooksRare)\n  const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Temporary placeholder\n\n  // Check if the owner has globally approved a marketplace\n  const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n  console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n\n  // Check approval for a specific NFT ID (assuming Token ID = 1 exists)\n  const approvedForToken = await contract.getApproved(1);\n  console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n  return {\n    isApprovedForAll,\n    approvedForToken\n  };\n}","map":{"version":3,"names":["ethers","getERC721Approvals","nftContractAddress","ownerAddress","provider","abi","contract","Contract","marketplaceAddress","isApprovedForAll","console","log","approvedForToken","getApproved"],"sources":["/Users/markemery/mini.revoke/src/utils/nftApprovals.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\nexport async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n    const abi = [\n        \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n        \"function getApproved(uint256 tokenId) view returns (address)\"\n    ];\n    \n    const contract = new ethers.Contract(nftContractAddress, abi, provider);\n\n    // Replace with the actual marketplace address (e.g., OpenSea, LooksRare)\n    const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Temporary placeholder\n\n    // Check if the owner has globally approved a marketplace\n    const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n    console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n\n    // Check approval for a specific NFT ID (assuming Token ID = 1 exists)\n    const approvedForToken = await contract.getApproved(1);\n    console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n\n    return { isApprovedForAll, approvedForToken };\n}\n\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAE/B,OAAO,eAAeC,kBAAkBA,CAACC,kBAAkB,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EACjF,MAAMC,GAAG,GAAG,CACR,gFAAgF,EAChF,8DAA8D,CACjE;EAED,MAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,QAAQ,CAACL,kBAAkB,EAAEG,GAAG,EAAED,QAAQ,CAAC;;EAEvE;EACA,MAAMI,kBAAkB,GAAG,4CAA4C,CAAC,CAAC;;EAEzE;EACA,MAAMC,gBAAgB,GAAG,MAAMH,QAAQ,CAACG,gBAAgB,CAACN,YAAY,EAAEK,kBAAkB,CAAC;EAC1FE,OAAO,CAACC,GAAG,CAAC,8BAA8BF,gBAAgB,EAAE,CAAC;;EAE7D;EACA,MAAMG,gBAAgB,GAAG,MAAMN,QAAQ,CAACO,WAAW,CAAC,CAAC,CAAC;EACtDH,OAAO,CAACC,GAAG,CAAC,sCAAsCC,gBAAgB,EAAE,CAAC;EAErE,OAAO;IAAEH,gBAAgB;IAAEG;EAAiB,CAAC;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}