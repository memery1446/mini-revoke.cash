{"ast":null,"code":"import { ethers } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n  const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n  let approvals = [];\n\n  // ‚úÖ Use a valid spender address (avoid ENS resolution issues)\n  const spenderAddresses = [\"0x000000000000000000000000000000000000dead\" // Dummy address\n  ];\n  try {\n    // ‚úÖ Ensure owner address is checksummed\n    const owner = ethers.utils.getAddress(ownerAddress);\n\n    // ‚úÖ Use a signer from the provider\n    const signer = provider.getSigner();\n    console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n    for (let tokenAddress of tokenContracts) {\n      try {\n        if (!ethers.utils.isAddress(tokenAddress)) {\n          console.error(`‚ùå Invalid token address provided: ${tokenAddress}`);\n          continue;\n        }\n        const contract = new ethers.Contract(tokenAddress,\n        // Ensure valid contract address\n        abi, signer // Use signer for contract calls\n        );\n        for (let spender of spenderAddresses) {\n          console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n          try {\n            const allowance = await contract.allowance(owner, spender);\n            if (allowance.gt(0)) {\n              approvals.push({\n                contract: tokenAddress,\n                type: \"ERC-20\",\n                spender: spender,\n                amount: allowance.toString()\n              });\n            }\n          } catch (error) {\n            console.error(`‚ùå Error fetching allowance for spender: ${spender}`, error);\n          }\n        }\n      } catch (error) {\n        console.error(`‚ùå Error creating contract for token: ${tokenAddress}`, error);\n      }\n    }\n    console.log(\"‚úÖ ERC-20 Approvals Fetched:\", approvals);\n  } catch (error) {\n    console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n  }\n  return approvals;\n}","map":{"version":3,"names":["ethers","getERC20Approvals","tokenContracts","ownerAddress","provider","abi","approvals","spenderAddresses","owner","utils","getAddress","signer","getSigner","console","log","tokenAddress","isAddress","error","contract","Contract","spender","allowance","gt","push","type","amount","toString"],"sources":["/Users/markemery/mini.revoke/src/utils/erc20Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n    const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n\n    let approvals = [];\n\n    // ‚úÖ Use a valid spender address (avoid ENS resolution issues)\n    const spenderAddresses = [\n        \"0x000000000000000000000000000000000000dead\", // Dummy address\n    ];\n\n    try {\n        // ‚úÖ Ensure owner address is checksummed\n        const owner = ethers.utils.getAddress(ownerAddress);\n\n        // ‚úÖ Use a signer from the provider\n        const signer = provider.getSigner();\n\n        console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n\n        for (let tokenAddress of tokenContracts) {\n            try {\n                if (!ethers.utils.isAddress(tokenAddress)) {\n                    console.error(`‚ùå Invalid token address provided: ${tokenAddress}`);\n                    continue;\n                }\n\n                const contract = new ethers.Contract(\n                    tokenAddress, // Ensure valid contract address\n                    abi,\n                    signer // Use signer for contract calls\n                );\n\n                for (let spender of spenderAddresses) {\n                    console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n\n                    try {\n                        const allowance = await contract.allowance(owner, spender);\n                        if (allowance.gt(0)) {\n                            approvals.push({\n                                contract: tokenAddress,\n                                type: \"ERC-20\",\n                                spender: spender,\n                                amount: allowance.toString(),\n                            });\n                        }\n                    } catch (error) {\n                        console.error(`‚ùå Error fetching allowance for spender: ${spender}`, error);\n                    }\n                }\n            } catch (error) {\n                console.error(`‚ùå Error creating contract for token: ${tokenAddress}`, error);\n            }\n        }\n\n        console.log(\"‚úÖ ERC-20 Approvals Fetched:\", approvals);\n    } catch (error) {\n        console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n    }\n\n    return approvals;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAO,eAAeC,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAC5E,MAAMC,GAAG,GAAG,CAAC,2EAA2E,CAAC;EAEzF,IAAIC,SAAS,GAAG,EAAE;;EAElB;EACA,MAAMC,gBAAgB,GAAG,CACrB,4CAA4C,CAAE;EAAA,CACjD;EAED,IAAI;IACA;IACA,MAAMC,KAAK,GAAGR,MAAM,CAACS,KAAK,CAACC,UAAU,CAACP,YAAY,CAAC;;IAEnD;IACA,MAAMQ,MAAM,GAAGP,QAAQ,CAACQ,SAAS,CAAC,CAAC;IAEnCC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEZ,cAAc,CAAC;IAE/D,KAAK,IAAIa,YAAY,IAAIb,cAAc,EAAE;MACrC,IAAI;QACA,IAAI,CAACF,MAAM,CAACS,KAAK,CAACO,SAAS,CAACD,YAAY,CAAC,EAAE;UACvCF,OAAO,CAACI,KAAK,CAAC,qCAAqCF,YAAY,EAAE,CAAC;UAClE;QACJ;QAEA,MAAMG,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,QAAQ,CAChCJ,YAAY;QAAE;QACdV,GAAG,EACHM,MAAM,CAAC;QACX,CAAC;QAED,KAAK,IAAIS,OAAO,IAAIb,gBAAgB,EAAE;UAClCM,OAAO,CAACC,GAAG,CAAC,uCAAuCM,OAAO,EAAE,CAAC;UAE7D,IAAI;YACA,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACG,SAAS,CAACb,KAAK,EAAEY,OAAO,CAAC;YAC1D,IAAIC,SAAS,CAACC,EAAE,CAAC,CAAC,CAAC,EAAE;cACjBhB,SAAS,CAACiB,IAAI,CAAC;gBACXL,QAAQ,EAAEH,YAAY;gBACtBS,IAAI,EAAE,QAAQ;gBACdJ,OAAO,EAAEA,OAAO;gBAChBK,MAAM,EAAEJ,SAAS,CAACK,QAAQ,CAAC;cAC/B,CAAC,CAAC;YACN;UACJ,CAAC,CAAC,OAAOT,KAAK,EAAE;YACZJ,OAAO,CAACI,KAAK,CAAC,2CAA2CG,OAAO,EAAE,EAAEH,KAAK,CAAC;UAC9E;QACJ;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,wCAAwCF,YAAY,EAAE,EAAEE,KAAK,CAAC;MAChF;IACJ;IAEAJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAER,SAAS,CAAC;EACzD,CAAC,CAAC,OAAOW,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAClE;EAEA,OAAOX,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}