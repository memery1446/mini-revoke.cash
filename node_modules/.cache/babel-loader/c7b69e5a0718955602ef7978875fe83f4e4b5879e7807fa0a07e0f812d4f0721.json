{"ast":null,"code":"// Updated nftApprovals.js\nimport { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // ‚úÖ Fixed path\nimport CONTRACT_ADDRESSES from \"../constants/addresses\";\nexport async function getERC721Approvals(userAddress, tokenId = 1) {\n  try {\n    const provider = getProvider();\n    const signer = provider.getSigner();\n    const nftContractAddress = CONTRACT_ADDRESSES.TestNFT;\n    const nftContract = new ethers.Contract(nftContractAddress, [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function getApproved(uint256 tokenId) view returns (address)\"], signer);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üîç Checking ERC-721 Approvals for:\", nftContractAddress);\n    console.log(\"üìå Owner Address:\", userAddress);\n    console.log(\"üìå Operator Address:\", operatorAddress);\n    let isApproved = false;\n    try {\n      isApproved = await nftContract.isApprovedForAll(userAddress, operatorAddress);\n    } catch (error) {\n      console.warn(\"‚ö†Ô∏è isApprovedForAll call failed, likely due to no approvals set.\");\n    }\n    let specificApproval = \"0x0000000000000000000000000000000000000000\";\n    try {\n      specificApproval = await nftContract.getApproved(tokenId);\n    } catch (error) {\n      console.warn(\"‚ö†Ô∏è getApproved call failed, possibly no approval set for token ID:\", tokenId);\n    }\n    console.log(\"‚úÖ ERC-721 Approval Status:\", isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\");\n    return isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\";\n  } catch (error) {\n    console.error(\"‚ùå Error fetching ERC-721 approvals:\", error);\n    return false;\n  }\n}\nexport async function revokeERC721Approval(userAddress) {\n  try {\n    const provider = getProvider();\n    const signer = provider.getSigner();\n    const nftContractAddress = CONTRACT_ADDRESSES.TestNFT;\n    const nftContract = new ethers.Contract(nftContractAddress, [\"function setApprovalForAll(address operator, bool approved) external\"], signer);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üõë Revoking ERC-721 Approval for:\", operatorAddress);\n    const tx = await nftContract.setApprovalForAll(operatorAddress, false);\n    await tx.wait();\n    console.log(\"‚úÖ ERC-721 Approval Revoked\");\n  } catch (error) {\n    console.error(\"‚ùå Error revoking ERC-721 approval:\", error);\n  }\n}\nexport async function batchRevokeERC721Approvals(userAddresses) {\n  try {\n    for (const userAddress of userAddresses) {\n      await revokeERC721Approval(userAddress);\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in batch revocation of ERC-721 approvals:\", error);\n  }\n}","map":{"version":3,"names":["ethers","getProvider","CONTRACT_ADDRESSES","getERC721Approvals","userAddress","tokenId","provider","signer","getSigner","nftContractAddress","TestNFT","nftContract","Contract","operatorAddress","MockSpender","console","log","isApproved","isApprovedForAll","error","warn","specificApproval","getApproved","revokeERC721Approval","tx","setApprovalForAll","wait","batchRevokeERC721Approvals","userAddresses"],"sources":["/Users/markemery/mini.revoke/src/utils/nftApprovals.js"],"sourcesContent":["\n// Updated nftApprovals.js\nimport { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // ‚úÖ Fixed path\nimport CONTRACT_ADDRESSES from \"../constants/addresses\";\n\nexport async function getERC721Approvals(userAddress, tokenId = 1) {\n    try {\n        const provider = getProvider();\n        const signer = provider.getSigner();\n        const nftContractAddress = CONTRACT_ADDRESSES.TestNFT;\n        const nftContract = new ethers.Contract(nftContractAddress, [\n            \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n            \"function getApproved(uint256 tokenId) view returns (address)\"\n        ], signer);\n        \n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üîç Checking ERC-721 Approvals for:\", nftContractAddress);\n        console.log(\"üìå Owner Address:\", userAddress);\n        console.log(\"üìå Operator Address:\", operatorAddress);\n        \n        let isApproved = false;\n        try {\n            isApproved = await nftContract.isApprovedForAll(userAddress, operatorAddress);\n        } catch (error) {\n            console.warn(\"‚ö†Ô∏è isApprovedForAll call failed, likely due to no approvals set.\");\n        }\n        \n        let specificApproval = \"0x0000000000000000000000000000000000000000\";\n        try {\n            specificApproval = await nftContract.getApproved(tokenId);\n        } catch (error) {\n            console.warn(\"‚ö†Ô∏è getApproved call failed, possibly no approval set for token ID:\", tokenId);\n        }\n        \n        console.log(\"‚úÖ ERC-721 Approval Status:\", isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\");\n        return isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\";\n    } catch (error) {\n        console.error(\"‚ùå Error fetching ERC-721 approvals:\", error);\n        return false;\n    }\n}\n\nexport async function revokeERC721Approval(userAddress) {\n    try {\n        const provider = getProvider();\n        const signer = provider.getSigner();\n        const nftContractAddress = CONTRACT_ADDRESSES.TestNFT;\n        const nftContract = new ethers.Contract(nftContractAddress, [\n            \"function setApprovalForAll(address operator, bool approved) external\"\n        ], signer);\n        \n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üõë Revoking ERC-721 Approval for:\", operatorAddress);\n        \n        const tx = await nftContract.setApprovalForAll(operatorAddress, false);\n        await tx.wait();\n        console.log(\"‚úÖ ERC-721 Approval Revoked\");\n    } catch (error) {\n        console.error(\"‚ùå Error revoking ERC-721 approval:\", error);\n    }\n}\n\nexport async function batchRevokeERC721Approvals(userAddresses) {\n    try {\n        for (const userAddress of userAddresses) {\n            await revokeERC721Approval(userAddress);\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in batch revocation of ERC-721 approvals:\", error);\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}