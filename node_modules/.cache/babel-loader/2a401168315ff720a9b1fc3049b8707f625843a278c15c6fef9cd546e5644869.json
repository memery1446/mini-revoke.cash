{"ast":null,"code":"var _jsxFileName = \"/Users/markemery/mini.revoke/src/components/ERC1155Approvals.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { provider } from \"../provider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERC1155Approvals = ({\n  contractAddress\n}) => {\n  _s();\n  const [approvals, setApprovals] = useState(null);\n  useEffect(() => {\n    if (contractAddress && window.ethereum) {\n      fetchApprovalStatus();\n    }\n  }, [contractAddress]);\n  const fetchApprovalStatus = async () => {\n    try {\n      console.log(\"üîç Fetching ERC-1155 approvals for contract:\", contractAddress);\n      if (!contractAddress) throw new Error(\"‚ùå Contract address is missing!\");\n      if (!window.ethereum) throw new Error(\"‚ùå MetaMask or a Web3 provider is required!\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []); // Ensure wallet is connected\n      const signer = provider.getSigner();\n      const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"];\n      const contract = new ethers.Contract(contractAddress, TestERC1155.abi, provider);\n      const ownerAddress = await signer.getAddress();\n      const spenderAddress = \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\"; // Ensure spender is correctly defined\n\n      console.log(\"üîç Debug: Contract Address ->\", contractAddress);\n      console.log(\"üîç Debug: Owner Address ->\", ownerAddress);\n      console.log(\"üîç Debug: Spender Address ->\", spenderAddress);\n      console.log(`üõ† Checking approval for: Owner ${ownerAddress} ‚Üí Spender ${spenderAddress}`);\n      if (!spenderAddress) throw new Error(\"‚ùå Spender address is missing!\");\n      console.log(\"Contract Address:\", contractAddress);\n      console.log(\"Owner Address:\", ownerAddress);\n      console.log(\"Spender Address:\", spenderAddress);\n      const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, spenderAddress);\n      console.log(\"‚úÖ ERC-1155 Approvals:\", isApprovedForAll);\n      setApprovals(isApprovedForAll);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"ERC-1155 Approvals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: approvals !== null ? `Approved: ${approvals}` : \"Fetching...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(ERC1155Approvals, \"CZiEPxUnFzh4w/Y4T3BlEBvC5Kw=\");\n_c = ERC1155Approvals;\nexport default ERC1155Approvals;\nvar _c;\n$RefreshReg$(_c, \"ERC1155Approvals\");","map":{"version":3,"names":["React","useState","useEffect","ethers","provider","jsxDEV","_jsxDEV","ERC1155Approvals","contractAddress","_s","approvals","setApprovals","window","ethereum","fetchApprovalStatus","console","log","Error","providers","Web3Provider","send","signer","getSigner","abi","contract","Contract","TestERC1155","ownerAddress","getAddress","spenderAddress","isApprovedForAll","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markemery/mini.revoke/src/components/ERC1155Approvals.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { provider } from \"../provider\"; \n\nconst ERC1155Approvals = ({ contractAddress }) => {\n  const [approvals, setApprovals] = useState(null);\n\n  useEffect(() => {\n    if (contractAddress && window.ethereum) {\n      fetchApprovalStatus();\n    }\n  }, [contractAddress]);\n\n  const fetchApprovalStatus = async () => {\n    try {\n      console.log(\"üîç Fetching ERC-1155 approvals for contract:\", contractAddress);\n      \n      if (!contractAddress) throw new Error(\"‚ùå Contract address is missing!\");\n      if (!window.ethereum) throw new Error(\"‚ùå MetaMask or a Web3 provider is required!\");\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []); // Ensure wallet is connected\n      const signer = provider.getSigner();\n\n      const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"];\nconst contract = new ethers.Contract(contractAddress, TestERC1155.abi, provider);\n\n      const ownerAddress = await signer.getAddress();\n      const spenderAddress = \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\"; // Ensure spender is correctly defined\n\n      console.log(\"üîç Debug: Contract Address ->\", contractAddress);\n      console.log(\"üîç Debug: Owner Address ->\", ownerAddress);\n      console.log(\"üîç Debug: Spender Address ->\", spenderAddress);\n\n      console.log(`üõ† Checking approval for: Owner ${ownerAddress} ‚Üí Spender ${spenderAddress}`);\n\n      if (!spenderAddress) throw new Error(\"‚ùå Spender address is missing!\");\nconsole.log(\"Contract Address:\", contractAddress);\nconsole.log(\"Owner Address:\", ownerAddress);\nconsole.log(\"Spender Address:\", spenderAddress);\n\n      const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, spenderAddress);\n\n      console.log(\"‚úÖ ERC-1155 Approvals:\", isApprovedForAll);\n      setApprovals(isApprovedForAll);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error.message);\n    }\n  };\n\n  return (\n    <div>\n      <h3>ERC-1155 Approvals</h3>\n      <p>{approvals !== null ? `Approved: ${approvals}` : \"Fetching...\"}</p>\n    </div>\n  );\n};\n\nexport default ERC1155Approvals;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}