{"ast":null,"code":"import { ethers } from \"ethers\";\nimport getProvider from \"../utils/provider\";\nimport TestERC1155 from \"../constants/abis\";\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\";\nconst provider = getProvider();\nconst erc1155Contract = new ethers.Contract(CONTRACT_ADDRESSES.ERC1155, TestERC1155.abi, provider);\nasync function getERC1155Approvals(ownerAddress) {\n  try {\n    console.log(\"üîç Fetching ERC-1155 approvals for\", ownerAddress);\n    const spenderAddresses = [CONTRACT_ADDRESSES.SPENDER];\n    let approvals = [];\n    for (let spender of spenderAddresses) {\n      const isApproved = await erc1155Contract.isApprovedForAll(ownerAddress, spender);\n      approvals.push({\n        spender,\n        isApproved\n      });\n    }\n    return approvals;\n  } catch (error) {\n    console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error);\n    return [];\n  }\n}\nasync function revokeERC1155Approval(spenderAddress) {\n  try {\n    console.log(\"üö® Revoking approval for ERC-1155 spender:\", spenderAddress);\n    const signer = provider.getSigner();\n    const contractWithSigner = erc1155Contract.connect(signer);\n    const tx = await contractWithSigner.setApprovalForAll(spenderAddress, false);\n    await tx.wait();\n    console.log(\"‚úÖ Approval revoked successfully.\");\n    return true;\n  } catch (error) {\n    console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n    return false;\n  }\n}\nasync function batchRevokeERC1155Approvals(spenderAddresses) {\n  try {\n    console.log(\"üö® Revoking approvals for multiple ERC-1155 spenders:\", spenderAddresses);\n    const signer = provider.getSigner();\n    const contractWithSigner = erc1155Contract.connect(signer);\n    for (let spender of spenderAddresses) {\n      const tx = await contractWithSigner.setApprovalForAll(spender, false);\n      await tx.wait();\n    }\n    console.log(\"‚úÖ Batch approval revocations successful.\");\n    return true;\n  } catch (error) {\n    console.error(\"‚ùå Error in batch revoking ERC-1155 approvals:\", error);\n    return false;\n  }\n}\nexport { getERC1155Approvals, revokeERC1155Approval, batchRevokeERC1155Approvals };","map":{"version":3,"names":["ethers","getProvider","TestERC1155","CONTRACT_ADDRESSES","provider","erc1155Contract","Contract","ERC1155","abi","getERC1155Approvals","ownerAddress","console","log","spenderAddresses","SPENDER","approvals","spender","isApproved","isApprovedForAll","push","error","revokeERC1155Approval","spenderAddress","signer","getSigner","contractWithSigner","connect","tx","setApprovalForAll","wait","batchRevokeERC1155Approvals"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport getProvider from \"../utils/provider\";\nimport TestERC1155 from \"../constants/abis\";\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\";\n\nconst provider = getProvider();\nconst erc1155Contract = new ethers.Contract(\n    CONTRACT_ADDRESSES.ERC1155,\n    TestERC1155.abi,\n    provider\n);\n\nasync function getERC1155Approvals(ownerAddress) {\n    try {\n        console.log(\"üîç Fetching ERC-1155 approvals for\", ownerAddress);\n\n        const spenderAddresses = [\n            CONTRACT_ADDRESSES.SPENDER\n        ];\n\n        let approvals = [];\n        for (let spender of spenderAddresses) {\n            const isApproved = await erc1155Contract.isApprovedForAll(ownerAddress, spender);\n            approvals.push({ spender, isApproved });\n        }\n\n        return approvals;\n    } catch (error) {\n        console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error);\n        return [];\n    }\n}\n\nasync function revokeERC1155Approval(spenderAddress) {\n    try {\n        console.log(\"üö® Revoking approval for ERC-1155 spender:\", spenderAddress);\n\n        const signer = provider.getSigner();\n        const contractWithSigner = erc1155Contract.connect(signer);\n\n        const tx = await contractWithSigner.setApprovalForAll(spenderAddress, false);\n        await tx.wait();\n\n        console.log(\"‚úÖ Approval revoked successfully.\");\n        return true;\n    } catch (error) {\n        console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n        return false;\n    }\n}\n\nasync function batchRevokeERC1155Approvals(spenderAddresses) {\n    try {\n        console.log(\"üö® Revoking approvals for multiple ERC-1155 spenders:\", spenderAddresses);\n\n        const signer = provider.getSigner();\n        const contractWithSigner = erc1155Contract.connect(signer);\n\n        for (let spender of spenderAddresses) {\n            const tx = await contractWithSigner.setApprovalForAll(spender, false);\n            await tx.wait();\n        }\n\n        console.log(\"‚úÖ Batch approval revocations successful.\");\n        return true;\n    } catch (error) {\n        console.error(\"‚ùå Error in batch revoking ERC-1155 approvals:\", error);\n        return false;\n    }\n}\n\nexport { getERC1155Approvals, revokeERC1155Approval, batchRevokeERC1155Approvals };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,kBAAkB,QAAQ,mBAAmB;AAEtD,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC;AAC9B,MAAMI,eAAe,GAAG,IAAIL,MAAM,CAACM,QAAQ,CACvCH,kBAAkB,CAACI,OAAO,EAC1BL,WAAW,CAACM,GAAG,EACfJ,QACJ,CAAC;AAED,eAAeK,mBAAmBA,CAACC,YAAY,EAAE;EAC7C,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,YAAY,CAAC;IAE/D,MAAMG,gBAAgB,GAAG,CACrBV,kBAAkB,CAACW,OAAO,CAC7B;IAED,IAAIC,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIC,OAAO,IAAIH,gBAAgB,EAAE;MAClC,MAAMI,UAAU,GAAG,MAAMZ,eAAe,CAACa,gBAAgB,CAACR,YAAY,EAAEM,OAAO,CAAC;MAChFD,SAAS,CAACI,IAAI,CAAC;QAAEH,OAAO;QAAEC;MAAW,CAAC,CAAC;IAC3C;IAEA,OAAOF,SAAS;EACpB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,EAAE;EACb;AACJ;AAEA,eAAeC,qBAAqBA,CAACC,cAAc,EAAE;EACjD,IAAI;IACAX,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEU,cAAc,CAAC;IAEzE,MAAMC,MAAM,GAAGnB,QAAQ,CAACoB,SAAS,CAAC,CAAC;IACnC,MAAMC,kBAAkB,GAAGpB,eAAe,CAACqB,OAAO,CAACH,MAAM,CAAC;IAE1D,MAAMI,EAAE,GAAG,MAAMF,kBAAkB,CAACG,iBAAiB,CAACN,cAAc,EAAE,KAAK,CAAC;IAC5E,MAAMK,EAAE,CAACE,IAAI,CAAC,CAAC;IAEflB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/C,OAAO,IAAI;EACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,OAAO,KAAK;EAChB;AACJ;AAEA,eAAeU,2BAA2BA,CAACjB,gBAAgB,EAAE;EACzD,IAAI;IACAF,OAAO,CAACC,GAAG,CAAC,uDAAuD,EAAEC,gBAAgB,CAAC;IAEtF,MAAMU,MAAM,GAAGnB,QAAQ,CAACoB,SAAS,CAAC,CAAC;IACnC,MAAMC,kBAAkB,GAAGpB,eAAe,CAACqB,OAAO,CAACH,MAAM,CAAC;IAE1D,KAAK,IAAIP,OAAO,IAAIH,gBAAgB,EAAE;MAClC,MAAMc,EAAE,GAAG,MAAMF,kBAAkB,CAACG,iBAAiB,CAACZ,OAAO,EAAE,KAAK,CAAC;MACrE,MAAMW,EAAE,CAACE,IAAI,CAAC,CAAC;IACnB;IAEAlB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,OAAO,IAAI;EACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACrE,OAAO,KAAK;EAChB;AACJ;AAEA,SAASX,mBAAmB,EAAEY,qBAAqB,EAAES,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}