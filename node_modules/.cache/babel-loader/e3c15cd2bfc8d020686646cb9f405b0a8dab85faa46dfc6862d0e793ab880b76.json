{"ast":null,"code":"var _jsxFileName = \"/Users/markemery/mini.revoke/src/components/NFTApprovals.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserProvider, Contract } from \"ethers\"; // ✅ Correct import for Ethers v6\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTApprovals = ({\n  contractAddress\n}) => {\n  _s();\n  const [approvals, setApprovals] = useState(null);\n  async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n    const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function getApproved(uint256 tokenId) view returns (address)\"];\n    const contract = new Contract(nftContractAddress, abi, provider);\n    const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Replace later\n\n    const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n    console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n    const approvedForToken = await contract.getApproved(1);\n    console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n    return {\n      isApprovedForAll,\n      approvedForToken\n    };\n  }\n  useEffect(() => {\n    const fetchApprovals = async () => {\n      const provider = new BrowserProvider(window.ethereum); // ✅ Corrected provider import\n      const signer = await provider.getSigner();\n      const ownerAddress = await signer.getAddress();\n      const approvalsData = await getERC721Approvals(contractAddress, ownerAddress, provider);\n      setApprovals(approvalsData);\n    };\n    fetchApprovals();\n  }, [contractAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"NFT Approvals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), approvals ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Global Approval: \", approvals.isApprovedForAll ? \"✅ Yes\" : \"❌ No\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Token ID 1 Approval: \", approvals.approvedForToken || \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading approvals...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTApprovals, \"CZiEPxUnFzh4w/Y4T3BlEBvC5Kw=\");\n_c = NFTApprovals;\nexport default NFTApprovals;\nvar _c;\n$RefreshReg$(_c, \"NFTApprovals\");","map":{"version":3,"names":["React","useState","useEffect","BrowserProvider","Contract","jsxDEV","_jsxDEV","NFTApprovals","contractAddress","_s","approvals","setApprovals","getERC721Approvals","nftContractAddress","ownerAddress","provider","abi","contract","marketplaceAddress","isApprovedForAll","console","log","approvedForToken","getApproved","fetchApprovals","window","ethereum","signer","getSigner","getAddress","approvalsData","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markemery/mini.revoke/src/components/NFTApprovals.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserProvider, Contract } from \"ethers\"; // ✅ Correct import for Ethers v6\n\nconst NFTApprovals = ({ contractAddress }) => {\n    const [approvals, setApprovals] = useState(null);\n\n    async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n        const abi = [\n            \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n            \"function getApproved(uint256 tokenId) view returns (address)\"\n        ];\n        \n        const contract = new Contract(nftContractAddress, abi, provider);\n        const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Replace later\n\n        const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n        console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n\n        const approvedForToken = await contract.getApproved(1);\n        console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n\n        return { isApprovedForAll, approvedForToken };\n    }\n\n    useEffect(() => {\n        const fetchApprovals = async () => {\n            const provider = new BrowserProvider(window.ethereum); // ✅ Corrected provider import\n            const signer = await provider.getSigner();\n            const ownerAddress = await signer.getAddress();\n\n            const approvalsData = await getERC721Approvals(contractAddress, ownerAddress, provider);\n            setApprovals(approvalsData);\n        };\n\n        fetchApprovals();\n    }, [contractAddress]);\n\n    return (\n        <div>\n            <h2>NFT Approvals</h2>\n            {approvals ? (\n                <ul>\n                    <li>Global Approval: {approvals.isApprovedForAll ? \"✅ Yes\" : \"❌ No\"}</li>\n                    <li>Token ID 1 Approval: {approvals.approvedForToken || \"None\"}</li>\n                </ul>\n            ) : (\n                <p>Loading approvals...</p>\n            )}\n        </div>\n    );\n};\n\nexport default NFTApprovals;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,EAAEC,QAAQ,QAAQ,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEhD,eAAeW,kBAAkBA,CAACC,kBAAkB,EAAEC,YAAY,EAAEC,QAAQ,EAAE;IAC1E,MAAMC,GAAG,GAAG,CACR,gFAAgF,EAChF,8DAA8D,CACjE;IAED,MAAMC,QAAQ,GAAG,IAAIb,QAAQ,CAACS,kBAAkB,EAAEG,GAAG,EAAED,QAAQ,CAAC;IAChE,MAAMG,kBAAkB,GAAG,4CAA4C,CAAC,CAAC;;IAEzE,MAAMC,gBAAgB,GAAG,MAAMF,QAAQ,CAACE,gBAAgB,CAACL,YAAY,EAAEI,kBAAkB,CAAC;IAC1FE,OAAO,CAACC,GAAG,CAAC,8BAA8BF,gBAAgB,EAAE,CAAC;IAE7D,MAAMG,gBAAgB,GAAG,MAAML,QAAQ,CAACM,WAAW,CAAC,CAAC,CAAC;IACtDH,OAAO,CAACC,GAAG,CAAC,sCAAsCC,gBAAgB,EAAE,CAAC;IAErE,OAAO;MAAEH,gBAAgB;MAAEG;IAAiB,CAAC;EACjD;EAEApB,SAAS,CAAC,MAAM;IACZ,MAAMsB,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMT,QAAQ,GAAG,IAAIZ,eAAe,CAACsB,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;MACvD,MAAMC,MAAM,GAAG,MAAMZ,QAAQ,CAACa,SAAS,CAAC,CAAC;MACzC,MAAMd,YAAY,GAAG,MAAMa,MAAM,CAACE,UAAU,CAAC,CAAC;MAE9C,MAAMC,aAAa,GAAG,MAAMlB,kBAAkB,CAACJ,eAAe,EAAEM,YAAY,EAAEC,QAAQ,CAAC;MACvFJ,YAAY,CAACmB,aAAa,CAAC;IAC/B,CAAC;IAEDN,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAAChB,eAAe,CAAC,CAAC;EAErB,oBACIF,OAAA;IAAAyB,QAAA,gBACIzB,OAAA;MAAAyB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBzB,SAAS,gBACNJ,OAAA;MAAAyB,QAAA,gBACIzB,OAAA;QAAAyB,QAAA,GAAI,mBAAiB,EAACrB,SAAS,CAACS,gBAAgB,GAAG,OAAO,GAAG,MAAM;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzE7B,OAAA;QAAAyB,QAAA,GAAI,uBAAqB,EAACrB,SAAS,CAACY,gBAAgB,IAAI,MAAM;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,gBAEL7B,OAAA;MAAAyB,QAAA,EAAG;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC7B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC1B,EAAA,CA/CIF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAiDlB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}