{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n  constructor(fragments) {\n    logger.checkNew(new.target, Interface);\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n        case \"error\":\n          bucket = this.errors;\n          break;\n        default:\n          return;\n      }\n      let signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n    const abi = this.fragments.map(fragment => fragment.format(format));\n    // We need to re-bundle the JSON fragments a bit\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n    return abi;\n  }\n  // Sub-classes can override these to handle other blockchains\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n  static getAddress(address) {\n    return getAddress(address);\n  }\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n      return this.functions[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n      return this.events[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n    return result;\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n      for (const name in this.errors) {\n        const error = this.errors[name];\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n      return this.errors[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  }\n  // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  }\n  // Decode the data for a function call (e.g. tx.data)\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }\n  // Encode the data for a function call (e.g. tx.data)\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }\n  // Decode the result from a function call (e.g. from eth_call)\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    let bytes = arrayify(data);\n    let reason = null;\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n        break;\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n          break;\n        }\n    }\n    return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  }\n  // Encode the result for a function call (e.g. for eth_call)\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n    let topics = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n      return hexZeroPad(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n      topics = topics.slice(1);\n    }\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n    let result = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      }\n      // Add the keyword argument if named and safe\n      if (param.name && result[param.name] == null) {\n        const value = result[index];\n        // Make error named values throw on access\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    });\n    // Make all error indexed values throw on access\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n    return Object.freeze(result);\n  }\n  // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  }\n  // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n}","map":{"version":3,"names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","ErrorDescription","Indexed","isIndexed","value","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","constructor","fragments","checkNew","new","target","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getError","_","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeErrorResult","bytes","slice","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","parseError","hexData","errorFragment","isInterface","_isInterface"],"sources":["/Users/markemery/mini.revoke/node_modules/ethers/node_modules/@ethersproject/abi/src.ts/interface.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        logger.checkNew(new.target, Interface);\n\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = eventFragment.inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}