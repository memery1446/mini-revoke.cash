{"ast":null,"code":"import { ethers } from \"ethers\";\nimport getProvider from \"./provider\";\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\";\nexport async function getERC1155Approvals(userAddress) {\n  try {\n    const provider = getProvider();\n    const contractAddress = CONTRACT_ADDRESSES.TestERC1155;\n    console.log(\"üîç Fetching ERC-1155 approvals for contract:\", contractAddress);\n    if (!contractAddress || contractAddress === \"0x0000000000000000000000000000000000000000\") {\n      throw new Error(\"üö® Invalid ERC-1155 contract address!\");\n    }\n    const contract = new ethers.Contract(contractAddress, [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"], provider);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üìå Checking approval for operator:\", operatorAddress);\n    const isApproved = await contract.isApprovedForAll(userAddress, operatorAddress);\n    console.log(\"‚úÖ ERC-1155 Approval Status:\", isApproved);\n    return isApproved;\n  } catch (error) {\n    console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error.message);\n    return false;\n  }\n}","map":{"version":3,"names":["ethers","getProvider","CONTRACT_ADDRESSES","getERC1155Approvals","userAddress","provider","contractAddress","TestERC1155","console","log","Error","contract","Contract","operatorAddress","MockSpender","isApproved","isApprovedForAll","error","message"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport getProvider from \"./provider\";\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\";\n\nexport async function getERC1155Approvals(userAddress) {\n    try {\n        const provider = getProvider();\n        const contractAddress = CONTRACT_ADDRESSES.TestERC1155;\n\n        console.log(\"üîç Fetching ERC-1155 approvals for contract:\", contractAddress);\n        \n        if (!contractAddress || contractAddress === \"0x0000000000000000000000000000000000000000\") {\n            throw new Error(\"üö® Invalid ERC-1155 contract address!\");\n        }\n\n        const contract = new ethers.Contract(\n            contractAddress,\n            [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"],\n            provider\n        );\n\n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üìå Checking approval for operator:\", operatorAddress);\n\n        const isApproved = await contract.isApprovedForAll(userAddress, operatorAddress);\n        console.log(\"‚úÖ ERC-1155 Approval Status:\", isApproved);\n        return isApproved;\n    } catch (error) {\n        console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error.message);\n        return false;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,YAAY;AACpC,SAASC,kBAAkB,QAAQ,mBAAmB;AAEtD,OAAO,eAAeC,mBAAmBA,CAACC,WAAW,EAAE;EACnD,IAAI;IACA,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;IAC9B,MAAMK,eAAe,GAAGJ,kBAAkB,CAACK,WAAW;IAEtDC,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEH,eAAe,CAAC;IAE5E,IAAI,CAACA,eAAe,IAAIA,eAAe,KAAK,4CAA4C,EAAE;MACtF,MAAM,IAAII,KAAK,CAAC,uCAAuC,CAAC;IAC5D;IAEA,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,QAAQ,CAChCN,eAAe,EACf,CAAC,gFAAgF,CAAC,EAClFD,QACJ,CAAC;IAED,MAAMQ,eAAe,GAAGX,kBAAkB,CAACY,WAAW;IACtDN,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEI,eAAe,CAAC;IAElE,MAAME,UAAU,GAAG,MAAMJ,QAAQ,CAACK,gBAAgB,CAACZ,WAAW,EAAES,eAAe,CAAC;IAChFL,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEM,UAAU,CAAC;IACtD,OAAOA,UAAU;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZT,OAAO,CAACS,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAACC,OAAO,CAAC;IACpE,OAAO,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}