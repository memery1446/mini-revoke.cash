{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESSES, TOKEN_ABI } from \"../../src/constants/abis\"; // ‚úÖ Ensuring proper import\n\nconst provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress) {\n  let approvals = [];\n\n  // ‚úÖ Ensure the ownerAddress is defined and valid\n  if (!ownerAddress || !ethers.utils.isAddress(ownerAddress)) {\n    console.error(`‚ùå Invalid owner address: ${ownerAddress}`);\n    return [];\n  }\n  const spenderAddresses = [CONTRACT_ADDRESSES.TK1,\n  // ‚úÖ Token contract itself\n  \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\" // ‚úÖ Test wallet\n  ];\n  try {\n    console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n    for (let tokenAddress of tokenContracts) {\n      if (!ethers.utils.isAddress(tokenAddress)) {\n        console.error(`‚ùå Invalid token address: ${tokenAddress}`);\n        continue;\n      }\n      console.log(\"üîç Fetching ABI Methods...\");\n      const contract = new ethers.Contract(tokenAddress, TOKEN_ABI, provider);\n      console.log(\"‚úÖ Contract ABI Methods:\", contract.interface.fragments.map(f => f.name));\n      for (let spender of spenderAddresses) {\n        console.log(\"üîç Checking ERC-20 Allowance...\");\n        console.log(\"üìå Token Address:\", tokenAddress);\n        console.log(\"üìå Spender Address:\", spender);\n        console.log(\"üìå Owner Address:\", ownerAddress);\n        try {\n          const network = await provider.getNetwork();\n          console.log(\"‚úÖ Connected to Network ID:\", network.chainId);\n          const allowance = await contract.allowance(ownerAddress, spender);\n          if (allowance.gt(0)) {\n            approvals.push({\n              contract: tokenAddress,\n              type: \"ERC-20\",\n              spender: spender,\n              amount: allowance.toString()\n            });\n          }\n        } catch (error) {\n          console.error(`‚ùå Error fetching allowance for spender: ${spender} on token: ${tokenAddress}`, error);\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n  }\n  return approvals;\n}","map":{"version":3,"names":["ethers","CONTRACT_ADDRESSES","TOKEN_ABI","provider","providers","JsonRpcProvider","getERC20Approvals","tokenContracts","ownerAddress","approvals","utils","isAddress","console","error","spenderAddresses","TK1","log","tokenAddress","contract","Contract","interface","fragments","map","f","name","spender","network","getNetwork","chainId","allowance","gt","push","type","amount","toString"],"sources":["/Users/markemery/mini.revoke/src/utils/erc20Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESSES, TOKEN_ABI } from \"../../src/constants/abis\"; // ‚úÖ Ensuring proper import\n\nconst provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress) {\n    let approvals = [];\n\n    // ‚úÖ Ensure the ownerAddress is defined and valid\n    if (!ownerAddress || !ethers.utils.isAddress(ownerAddress)) {\n        console.error(`‚ùå Invalid owner address: ${ownerAddress}`);\n        return [];\n    }\n\n    const spenderAddresses = [\n        CONTRACT_ADDRESSES.TK1, // ‚úÖ Token contract itself\n        \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\" // ‚úÖ Test wallet\n    ];\n\n    try {\n        console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n\n        for (let tokenAddress of tokenContracts) {\n            if (!ethers.utils.isAddress(tokenAddress)) {\n                console.error(`‚ùå Invalid token address: ${tokenAddress}`);\n                continue;\n            }\n\n            console.log(\"üîç Fetching ABI Methods...\");\n            const contract = new ethers.Contract(tokenAddress, TOKEN_ABI, provider);\n            console.log(\"‚úÖ Contract ABI Methods:\", contract.interface.fragments.map(f => f.name));\n\n            for (let spender of spenderAddresses) {\n                console.log(\"üîç Checking ERC-20 Allowance...\");\n                console.log(\"üìå Token Address:\", tokenAddress);\n                console.log(\"üìå Spender Address:\", spender);\n                console.log(\"üìå Owner Address:\", ownerAddress);\n\n                try {\n                    const network = await provider.getNetwork();\n                    console.log(\"‚úÖ Connected to Network ID:\", network.chainId);\n\n                    const allowance = await contract.allowance(ownerAddress, spender);\n                    if (allowance.gt(0)) {\n                        approvals.push({\n                            contract: tokenAddress,\n                            type: \"ERC-20\",\n                            spender: spender,\n                            amount: allowance.toString(),\n                        });\n                    }\n                } catch (error) {\n                    console.error(`‚ùå Error fetching allowance for spender: ${spender} on token: ${tokenAddress}`, error);\n                }\n            }\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n    }\n\n    return approvals;\n}\n\n\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,kBAAkB,EAAEC,SAAS,QAAQ,0BAA0B,CAAC,CAAC;;AAE1E,MAAMC,QAAQ,GAAG,IAAIH,MAAM,CAACI,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC;;AAE9E;AACA,OAAO,eAAeC,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAE;EAClE,IAAIC,SAAS,GAAG,EAAE;;EAElB;EACA,IAAI,CAACD,YAAY,IAAI,CAACR,MAAM,CAACU,KAAK,CAACC,SAAS,CAACH,YAAY,CAAC,EAAE;IACxDI,OAAO,CAACC,KAAK,CAAC,4BAA4BL,YAAY,EAAE,CAAC;IACzD,OAAO,EAAE;EACb;EAEA,MAAMM,gBAAgB,GAAG,CACrBb,kBAAkB,CAACc,GAAG;EAAE;EACxB,4CAA4C,CAAC;EAAA,CAChD;EAED,IAAI;IACAH,OAAO,CAACI,GAAG,CAAC,kCAAkC,EAAET,cAAc,CAAC;IAE/D,KAAK,IAAIU,YAAY,IAAIV,cAAc,EAAE;MACrC,IAAI,CAACP,MAAM,CAACU,KAAK,CAACC,SAAS,CAACM,YAAY,CAAC,EAAE;QACvCL,OAAO,CAACC,KAAK,CAAC,4BAA4BI,YAAY,EAAE,CAAC;QACzD;MACJ;MAEAL,OAAO,CAACI,GAAG,CAAC,4BAA4B,CAAC;MACzC,MAAME,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,QAAQ,CAACF,YAAY,EAAEf,SAAS,EAAEC,QAAQ,CAAC;MACvES,OAAO,CAACI,GAAG,CAAC,yBAAyB,EAAEE,QAAQ,CAACE,SAAS,CAACC,SAAS,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC;MAErF,KAAK,IAAIC,OAAO,IAAIX,gBAAgB,EAAE;QAClCF,OAAO,CAACI,GAAG,CAAC,iCAAiC,CAAC;QAC9CJ,OAAO,CAACI,GAAG,CAAC,mBAAmB,EAAEC,YAAY,CAAC;QAC9CL,OAAO,CAACI,GAAG,CAAC,qBAAqB,EAAES,OAAO,CAAC;QAC3Cb,OAAO,CAACI,GAAG,CAAC,mBAAmB,EAAER,YAAY,CAAC;QAE9C,IAAI;UACA,MAAMkB,OAAO,GAAG,MAAMvB,QAAQ,CAACwB,UAAU,CAAC,CAAC;UAC3Cf,OAAO,CAACI,GAAG,CAAC,4BAA4B,EAAEU,OAAO,CAACE,OAAO,CAAC;UAE1D,MAAMC,SAAS,GAAG,MAAMX,QAAQ,CAACW,SAAS,CAACrB,YAAY,EAAEiB,OAAO,CAAC;UACjE,IAAII,SAAS,CAACC,EAAE,CAAC,CAAC,CAAC,EAAE;YACjBrB,SAAS,CAACsB,IAAI,CAAC;cACXb,QAAQ,EAAED,YAAY;cACtBe,IAAI,EAAE,QAAQ;cACdP,OAAO,EAAEA,OAAO;cAChBQ,MAAM,EAAEJ,SAAS,CAACK,QAAQ,CAAC;YAC/B,CAAC,CAAC;UACN;QACJ,CAAC,CAAC,OAAOrB,KAAK,EAAE;UACZD,OAAO,CAACC,KAAK,CAAC,2CAA2CY,OAAO,cAAcR,YAAY,EAAE,EAAEJ,KAAK,CAAC;QACxG;MACJ;IACJ;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAClE;EAEA,OAAOJ,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}