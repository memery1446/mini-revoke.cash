{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n  const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n  let approvals = [];\n  for (let tokenAddress of tokenContracts) {\n    const contract = new Contract(tokenAddress, abi, provider);\n\n    // üöÄ Avoid ENS resolution issues by ensuring spenders are actual addresses\n    const spenderAddresses = [\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"]; // Replace with actual spender list\n    const validSpenderAddresses = spenderAddresses.filter(addr => ethers.utils.isAddress(addr));\n    for (let spender of validSpenderAddresses) {\n      console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n      try {\n        const allowance = await contract.allowance(ownerAddress, spender);\n        if (allowance > 0) {\n          approvals.push({\n            contract: tokenAddress,\n            type: \"ERC-20\",\n            spender: spender,\n            amount: allowance.toString()\n          });\n        }\n      } catch (error) {\n        console.error(`‚ùå Error fetching allowance for spender: ${spender}`, error);\n      }\n    }\n  }\n  return approvals; // ‚úÖ Ensure function returns approvals\n}\n\n/** Function to batch revoke ERC-20 approvals */\nexport async function batchRevokeERC20Approvals(tokenContracts, signer) {\n  const abi = [\"function approve(address spender, uint256 amount)\"];\n  console.log(\"‚è≥ Revoking multiple ERC-20 approvals...\");\n  for (let tokenAddress of tokenContracts) {\n    try {\n      const contract = new Contract(tokenAddress, abi, signer);\n      const tx = await contract.approve(\"0x0000000000000000000000000000000000000000\", 0);\n      await tx.wait();\n      console.log(`‚úÖ ERC-20 Approval Revoked for: ${tokenAddress}`);\n    } catch (error) {\n      console.error(`‚ùå Error revoking approval for: ${tokenAddress}`, error);\n    }\n  }\n  console.log(\"‚úÖ All ERC-20 approvals revoked!\");\n}","map":{"version":3,"names":["ethers","Contract","getERC20Approvals","tokenContracts","ownerAddress","provider","abi","approvals","tokenAddress","contract","spenderAddresses","validSpenderAddresses","filter","addr","utils","isAddress","spender","console","log","allowance","push","type","amount","toString","error","batchRevokeERC20Approvals","signer","tx","approve","wait"],"sources":["/Users/markemery/mini.revoke/src/utils/erc20Approvals.js"],"sourcesContent":["import { ethers, Contract } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n    const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n    let approvals = [];\n\n    for (let tokenAddress of tokenContracts) {\n        const contract = new Contract(tokenAddress, abi, provider);\n\n        // üöÄ Avoid ENS resolution issues by ensuring spenders are actual addresses\n        const spenderAddresses = [\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"]; // Replace with actual spender list\n        const validSpenderAddresses = spenderAddresses.filter(addr => ethers.utils.isAddress(addr));\n\n        for (let spender of validSpenderAddresses) {\n            console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n\n            try {\n                const allowance = await contract.allowance(ownerAddress, spender);\n                if (allowance > 0) {\n                    approvals.push({\n                        contract: tokenAddress,\n                        type: \"ERC-20\",\n                        spender: spender,\n                        amount: allowance.toString()\n                    });\n                }\n            } catch (error) {\n                console.error(`‚ùå Error fetching allowance for spender: ${spender}`, error);\n            }\n        }\n    }\n\n    return approvals; // ‚úÖ Ensure function returns approvals\n}\n\n/** Function to batch revoke ERC-20 approvals */\nexport async function batchRevokeERC20Approvals(tokenContracts, signer) {\n    const abi = [\"function approve(address spender, uint256 amount)\"];\n\n    console.log(\"‚è≥ Revoking multiple ERC-20 approvals...\");\n\n    for (let tokenAddress of tokenContracts) {\n        try {\n            const contract = new Contract(tokenAddress, abi, signer);\n            const tx = await contract.approve(\"0x0000000000000000000000000000000000000000\", 0);\n            await tx.wait();\n            console.log(`‚úÖ ERC-20 Approval Revoked for: ${tokenAddress}`);\n        } catch (error) {\n            console.error(`‚ùå Error revoking approval for: ${tokenAddress}`, error);\n        }\n    }\n\n    console.log(\"‚úÖ All ERC-20 approvals revoked!\");\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,QAAQ;;AAEzC;AACA,OAAO,eAAeC,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAC5E,MAAMC,GAAG,GAAG,CAAC,2EAA2E,CAAC;EACzF,IAAIC,SAAS,GAAG,EAAE;EAElB,KAAK,IAAIC,YAAY,IAAIL,cAAc,EAAE;IACrC,MAAMM,QAAQ,GAAG,IAAIR,QAAQ,CAACO,YAAY,EAAEF,GAAG,EAAED,QAAQ,CAAC;;IAE1D;IACA,MAAMK,gBAAgB,GAAG,CAAC,4CAA4C,CAAC,CAAC,CAAC;IACzE,MAAMC,qBAAqB,GAAGD,gBAAgB,CAACE,MAAM,CAACC,IAAI,IAAIb,MAAM,CAACc,KAAK,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;IAE3F,KAAK,IAAIG,OAAO,IAAIL,qBAAqB,EAAE;MACvCM,OAAO,CAACC,GAAG,CAAC,uCAAuCF,OAAO,EAAE,CAAC;MAE7D,IAAI;QACA,MAAMG,SAAS,GAAG,MAAMV,QAAQ,CAACU,SAAS,CAACf,YAAY,EAAEY,OAAO,CAAC;QACjE,IAAIG,SAAS,GAAG,CAAC,EAAE;UACfZ,SAAS,CAACa,IAAI,CAAC;YACXX,QAAQ,EAAED,YAAY;YACtBa,IAAI,EAAE,QAAQ;YACdL,OAAO,EAAEA,OAAO;YAChBM,MAAM,EAAEH,SAAS,CAACI,QAAQ,CAAC;UAC/B,CAAC,CAAC;QACN;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZP,OAAO,CAACO,KAAK,CAAC,2CAA2CR,OAAO,EAAE,EAAEQ,KAAK,CAAC;MAC9E;IACJ;EACJ;EAEA,OAAOjB,SAAS,CAAC,CAAC;AACtB;;AAEA;AACA,OAAO,eAAekB,yBAAyBA,CAACtB,cAAc,EAAEuB,MAAM,EAAE;EACpE,MAAMpB,GAAG,GAAG,CAAC,mDAAmD,CAAC;EAEjEW,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;EAEtD,KAAK,IAAIV,YAAY,IAAIL,cAAc,EAAE;IACrC,IAAI;MACA,MAAMM,QAAQ,GAAG,IAAIR,QAAQ,CAACO,YAAY,EAAEF,GAAG,EAAEoB,MAAM,CAAC;MACxD,MAAMC,EAAE,GAAG,MAAMlB,QAAQ,CAACmB,OAAO,CAAC,4CAA4C,EAAE,CAAC,CAAC;MAClF,MAAMD,EAAE,CAACE,IAAI,CAAC,CAAC;MACfZ,OAAO,CAACC,GAAG,CAAC,kCAAkCV,YAAY,EAAE,CAAC;IACjE,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,kCAAkChB,YAAY,EAAE,EAAEgB,KAAK,CAAC;IAC1E;EACJ;EAEAP,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;AAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}