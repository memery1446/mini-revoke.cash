{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESSES, TOKEN_ABI } from \"../../src/constants/abis\"; // ‚úÖ Fixed import structure\n\n// ‚úÖ Ensure the correct provider is always used\nconst provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // ‚úÖ Forces Hardhat fork\n// ‚úÖ Fallback to localhost\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, passedProvider = provider) {\n  let approvals = [];\n\n  // ‚úÖ List of spender addresses to check\n  const spenderAddresses = [CONTRACT_ADDRESSES.TK1,\n  // ‚úÖ Token contract itself\n  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" // ‚úÖ Test wallet\n  ];\n  try {\n    // ‚úÖ Validate the owner address\n    if (!ethers.utils.isAddress(ownerAddress)) {\n      throw new Error(`Invalid owner address: ${ownerAddress}`);\n    }\n    const owner = ethers.utils.getAddress(ownerAddress);\n    console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n    for (let tokenAddress of tokenContracts) {\n      if (!ethers.utils.isAddress(tokenAddress)) {\n        console.error(`‚ùå Invalid token address: ${tokenAddress}`);\n        continue;\n      }\n\n      // ‚úÖ Create contract instance with the correct provider\n      const contract = new ethers.Contract(tokenAddress, TOKEN_ABI, passedProvider);\n      for (let spender of spenderAddresses) {\n        console.log(\"üîç Checking ERC-20 Allowance...\");\n        console.log(\"üìå Using Provider:\", provider.connection.url);\n        console.log(\"üìå Token Address:\", tokenAddress);\n        console.log(\"üìå Spender Address:\", spender);\n        console.log(\"üìå Owner Address:\", owner);\n        console.log(\"üìå Expected Network:\", await provider.getNetwork());\n        console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n        console.log(\"üîç Checking Provider Network...\");\n        const network = await provider.getNetwork();\n        console.log(\"‚úÖ Connected to Network ID:\", network.chainId);\n        try {\n          const allowance = await contract.allowance(owner, spender);\n          if (allowance.gt(0)) {\n            approvals.push({\n              contract: tokenAddress,\n              type: \"ERC-20\",\n              spender: spender,\n              amount: allowance.toString()\n            });\n          }\n        } catch (error) {\n          console.error(`‚ùå Error fetching allowance for spender: ${spender} on token: ${tokenAddress}`, error);\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n  }\n  return approvals;\n}","map":{"version":3,"names":["ethers","CONTRACT_ADDRESSES","TOKEN_ABI","provider","providers","JsonRpcProvider","getERC20Approvals","tokenContracts","ownerAddress","passedProvider","approvals","spenderAddresses","TK1","utils","isAddress","Error","owner","getAddress","console","log","tokenAddress","error","contract","Contract","spender","connection","url","getNetwork","network","chainId","allowance","gt","push","type","amount","toString"],"sources":["/Users/markemery/mini.revoke/src/utils/erc20Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESSES, TOKEN_ABI } from \"../../src/constants/abis\"; // ‚úÖ Fixed import structure\n\n// ‚úÖ Ensure the correct provider is always used\nconst provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\"); // ‚úÖ Forces Hardhat fork\n// ‚úÖ Fallback to localhost\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, passedProvider = provider) {\n    let approvals = [];\n\n    // ‚úÖ List of spender addresses to check\n    const spenderAddresses = [\n        CONTRACT_ADDRESSES.TK1, // ‚úÖ Token contract itself\n        \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" // ‚úÖ Test wallet\n    ];\n\n    try {\n        // ‚úÖ Validate the owner address\n        if (!ethers.utils.isAddress(ownerAddress)) {\n            throw new Error(`Invalid owner address: ${ownerAddress}`);\n        }\n        const owner = ethers.utils.getAddress(ownerAddress);\n\n        console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n\n        for (let tokenAddress of tokenContracts) {\n            if (!ethers.utils.isAddress(tokenAddress)) {\n                console.error(`‚ùå Invalid token address: ${tokenAddress}`);\n                continue;\n            }\n\n            // ‚úÖ Create contract instance with the correct provider\n            const contract = new ethers.Contract(tokenAddress, TOKEN_ABI, passedProvider);\n\n            for (let spender of spenderAddresses) {\n                console.log(\"üîç Checking ERC-20 Allowance...\");\nconsole.log(\"üìå Using Provider:\", provider.connection.url);\nconsole.log(\"üìå Token Address:\", tokenAddress);\nconsole.log(\"üìå Spender Address:\", spender);\nconsole.log(\"üìå Owner Address:\", owner);\nconsole.log(\"üìå Expected Network:\", await provider.getNetwork());\n\n                console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n                console.log(\"üîç Checking Provider Network...\");\n                const network = await provider.getNetwork();\n                console.log(\"‚úÖ Connected to Network ID:\", network.chainId);\n\n                try {\n                    const allowance = await contract.allowance(owner, spender);\n                    if (allowance.gt(0)) {\n                        approvals.push({\n                            contract: tokenAddress,\n                            type: \"ERC-20\",\n                            spender: spender,\n                            amount: allowance.toString(),\n                        });\n                    }\n                } catch (error) {\n                    console.error(`‚ùå Error fetching allowance for spender: ${spender} on token: ${tokenAddress}`, error);\n                }\n            }\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n    }\n\n    return approvals;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,kBAAkB,EAAEC,SAAS,QAAQ,0BAA0B,CAAC,CAAC;;AAE1E;AACA,MAAMC,QAAQ,GAAG,IAAIH,MAAM,CAACI,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC;AAChF;;AAEA;AACA,OAAO,eAAeC,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAEC,cAAc,GAAGN,QAAQ,EAAE;EAC7F,IAAIO,SAAS,GAAG,EAAE;;EAElB;EACA,MAAMC,gBAAgB,GAAG,CACrBV,kBAAkB,CAACW,GAAG;EAAE;EACxB,4CAA4C,CAAC;EAAA,CAChD;EAED,IAAI;IACA;IACA,IAAI,CAACZ,MAAM,CAACa,KAAK,CAACC,SAAS,CAACN,YAAY,CAAC,EAAE;MACvC,MAAM,IAAIO,KAAK,CAAC,0BAA0BP,YAAY,EAAE,CAAC;IAC7D;IACA,MAAMQ,KAAK,GAAGhB,MAAM,CAACa,KAAK,CAACI,UAAU,CAACT,YAAY,CAAC;IAEnDU,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEZ,cAAc,CAAC;IAE/D,KAAK,IAAIa,YAAY,IAAIb,cAAc,EAAE;MACrC,IAAI,CAACP,MAAM,CAACa,KAAK,CAACC,SAAS,CAACM,YAAY,CAAC,EAAE;QACvCF,OAAO,CAACG,KAAK,CAAC,4BAA4BD,YAAY,EAAE,CAAC;QACzD;MACJ;;MAEA;MACA,MAAME,QAAQ,GAAG,IAAItB,MAAM,CAACuB,QAAQ,CAACH,YAAY,EAAElB,SAAS,EAAEO,cAAc,CAAC;MAE7E,KAAK,IAAIe,OAAO,IAAIb,gBAAgB,EAAE;QAClCO,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9DD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEhB,QAAQ,CAACsB,UAAU,CAACC,GAAG,CAAC;QAC1DR,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,YAAY,CAAC;QAC9CF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEK,OAAO,CAAC;QAC3CN,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,KAAK,CAAC;QACvCE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,MAAMhB,QAAQ,CAACwB,UAAU,CAAC,CAAC,CAAC;QAEhDT,OAAO,CAACC,GAAG,CAAC,uCAAuCK,OAAO,EAAE,CAAC;QAC7DN,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,MAAMS,OAAO,GAAG,MAAMzB,QAAQ,CAACwB,UAAU,CAAC,CAAC;QAC3CT,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAES,OAAO,CAACC,OAAO,CAAC;QAE1D,IAAI;UACA,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACQ,SAAS,CAACd,KAAK,EAAEQ,OAAO,CAAC;UAC1D,IAAIM,SAAS,CAACC,EAAE,CAAC,CAAC,CAAC,EAAE;YACjBrB,SAAS,CAACsB,IAAI,CAAC;cACXV,QAAQ,EAAEF,YAAY;cACtBa,IAAI,EAAE,QAAQ;cACdT,OAAO,EAAEA,OAAO;cAChBU,MAAM,EAAEJ,SAAS,CAACK,QAAQ,CAAC;YAC/B,CAAC,CAAC;UACN;QACJ,CAAC,CAAC,OAAOd,KAAK,EAAE;UACZH,OAAO,CAACG,KAAK,CAAC,2CAA2CG,OAAO,cAAcJ,YAAY,EAAE,EAAEC,KAAK,CAAC;QACxG;MACJ;IACJ;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAClE;EAEA,OAAOX,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}