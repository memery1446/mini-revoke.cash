{"ast":null,"code":"import { Web3Provider, Contract } from \"ethers\"; // ✅ Correct import\n\n/** Function to get ERC-1155 Approvals */\nexport async function getERC1155Approvals(nftContractAddress, ownerAddress, provider) {\n  const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"];\n  const contract = new Contract(nftContractAddress, abi, provider);\n  const operatorAddress = \"0x0000000000000000000000000000000000000000\"; // Replace with actual marketplace\n\n  const isApproved = await contract.isApprovedForAll(ownerAddress, operatorAddress);\n  console.log(`✅ ERC-1155 Approval for All: ${isApproved}`);\n  return isApproved;\n}\n\n/** Function to revoke ERC-1155 Approvals */\nexport async function revokeERC1155Approval(nftContractAddress) {\n  const provider = new BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const abi = [\"function setApprovalForAll(address operator, bool approved)\"];\n  const contract = new Contract(nftContractAddress, abi, signer);\n  const tx = await contract.setApprovalForAll(\"0x0000000000000000000000000000000000000000\", false);\n  await tx.wait();\n  console.log(`✅ ERC-1155 Approval Revoked`);\n}\n\n/** Function to batch revoke ERC-1155 approvals */\nexport async function batchRevokeERC1155Approvals(nftContractAddress, signer) {\n  const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function setApprovalForAll(address operator, bool approved)\"];\n  const contract = new Contract(nftContractAddress, abi, signer);\n  const ownerAddress = await signer.getAddress();\n  const knownOperators = [\"0xMarketplace1\", \"0xMarketplace2\"]; // ✅ Replace with known marketplace addresses\n\n  console.log(\"⏳ Checking current ERC-1155 approvals...\");\n  const approvedOperators = [];\n  for (let operator of knownOperators) {\n    const isApproved = await contract.isApprovedForAll(ownerAddress, operator);\n    if (isApproved) approvedOperators.push(operator);\n  }\n  if (approvedOperators.length === 0) {\n    console.log(\"✅ No active approvals found for ERC-1155 tokens. Skipping revocation.\");\n    return;\n  }\n  console.log(`⏳ Revoking ERC-1155 approvals for: ${approvedOperators.join(\", \")}`);\n  for (let operator of approvedOperators) {\n    const tx = await contract.setApprovalForAll(operator, false);\n    await tx.wait();\n    console.log(`✅ Revoked approval for: ${operator}`);\n  }\n  console.log(\"✅ All ERC-1155 approvals revoked!\");\n}","map":{"version":3,"names":["Web3Provider","Contract","getERC1155Approvals","nftContractAddress","ownerAddress","provider","abi","contract","operatorAddress","isApproved","isApprovedForAll","console","log","revokeERC1155Approval","BrowserProvider","window","ethereum","signer","getSigner","tx","setApprovalForAll","wait","batchRevokeERC1155Approvals","getAddress","knownOperators","approvedOperators","operator","push","length","join"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["import { Web3Provider, Contract } from \"ethers\"; // ✅ Correct import\n\n/** Function to get ERC-1155 Approvals */\nexport async function getERC1155Approvals(nftContractAddress, ownerAddress, provider) {\n    const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"];\n    const contract = new Contract(nftContractAddress, abi, provider);\n    const operatorAddress = \"0x0000000000000000000000000000000000000000\"; // Replace with actual marketplace\n\n    const isApproved = await contract.isApprovedForAll(ownerAddress, operatorAddress);\n    console.log(`✅ ERC-1155 Approval for All: ${isApproved}`);\n\n    return isApproved;\n}\n\n/** Function to revoke ERC-1155 Approvals */\nexport async function revokeERC1155Approval(nftContractAddress) {\n    const provider = new BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    \n    const abi = [\"function setApprovalForAll(address operator, bool approved)\"];\n    const contract = new Contract(nftContractAddress, abi, signer);\n\n    const tx = await contract.setApprovalForAll(\"0x0000000000000000000000000000000000000000\", false);\n    await tx.wait();\n    console.log(`✅ ERC-1155 Approval Revoked`);\n}\n\n/** Function to batch revoke ERC-1155 approvals */\nexport async function batchRevokeERC1155Approvals(nftContractAddress, signer) {\n    const abi = [\n        \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n        \"function setApprovalForAll(address operator, bool approved)\"\n    ];\n    const contract = new Contract(nftContractAddress, abi, signer);\n    \n    const ownerAddress = await signer.getAddress();\n    const knownOperators = [\n        \"0xMarketplace1\", \"0xMarketplace2\"\n    ]; // ✅ Replace with known marketplace addresses\n\n    console.log(\"⏳ Checking current ERC-1155 approvals...\");\n\n    const approvedOperators = [];\n    for (let operator of knownOperators) {\n        const isApproved = await contract.isApprovedForAll(ownerAddress, operator);\n        if (isApproved) approvedOperators.push(operator);\n    }\n\n    if (approvedOperators.length === 0) {\n        console.log(\"✅ No active approvals found for ERC-1155 tokens. Skipping revocation.\");\n        return;\n    }\n\n    console.log(`⏳ Revoking ERC-1155 approvals for: ${approvedOperators.join(\", \")}`);\n\n    for (let operator of approvedOperators) {\n        const tx = await contract.setApprovalForAll(operator, false);\n        await tx.wait();\n        console.log(`✅ Revoked approval for: ${operator}`);\n    }\n\n    console.log(\"✅ All ERC-1155 approvals revoked!\");\n}\n\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,QAAQ,QAAQ,QAAQ,CAAC,CAAC;;AAEjD;AACA,OAAO,eAAeC,mBAAmBA,CAACC,kBAAkB,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAClF,MAAMC,GAAG,GAAG,CAAC,gFAAgF,CAAC;EAC9F,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACE,kBAAkB,EAAEG,GAAG,EAAED,QAAQ,CAAC;EAChE,MAAMG,eAAe,GAAG,4CAA4C,CAAC,CAAC;;EAEtE,MAAMC,UAAU,GAAG,MAAMF,QAAQ,CAACG,gBAAgB,CAACN,YAAY,EAAEI,eAAe,CAAC;EACjFG,OAAO,CAACC,GAAG,CAAC,gCAAgCH,UAAU,EAAE,CAAC;EAEzD,OAAOA,UAAU;AACrB;;AAEA;AACA,OAAO,eAAeI,qBAAqBA,CAACV,kBAAkB,EAAE;EAC5D,MAAME,QAAQ,GAAG,IAAIS,eAAe,CAACC,MAAM,CAACC,QAAQ,CAAC;EACrD,MAAMC,MAAM,GAAG,MAAMZ,QAAQ,CAACa,SAAS,CAAC,CAAC;EAEzC,MAAMZ,GAAG,GAAG,CAAC,6DAA6D,CAAC;EAC3E,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACE,kBAAkB,EAAEG,GAAG,EAAEW,MAAM,CAAC;EAE9D,MAAME,EAAE,GAAG,MAAMZ,QAAQ,CAACa,iBAAiB,CAAC,4CAA4C,EAAE,KAAK,CAAC;EAChG,MAAMD,EAAE,CAACE,IAAI,CAAC,CAAC;EACfV,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;AAC9C;;AAEA;AACA,OAAO,eAAeU,2BAA2BA,CAACnB,kBAAkB,EAAEc,MAAM,EAAE;EAC1E,MAAMX,GAAG,GAAG,CACR,gFAAgF,EAChF,6DAA6D,CAChE;EACD,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACE,kBAAkB,EAAEG,GAAG,EAAEW,MAAM,CAAC;EAE9D,MAAMb,YAAY,GAAG,MAAMa,MAAM,CAACM,UAAU,CAAC,CAAC;EAC9C,MAAMC,cAAc,GAAG,CACnB,gBAAgB,EAAE,gBAAgB,CACrC,CAAC,CAAC;;EAEHb,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;EAEvD,MAAMa,iBAAiB,GAAG,EAAE;EAC5B,KAAK,IAAIC,QAAQ,IAAIF,cAAc,EAAE;IACjC,MAAMf,UAAU,GAAG,MAAMF,QAAQ,CAACG,gBAAgB,CAACN,YAAY,EAAEsB,QAAQ,CAAC;IAC1E,IAAIjB,UAAU,EAAEgB,iBAAiB,CAACE,IAAI,CAACD,QAAQ,CAAC;EACpD;EAEA,IAAID,iBAAiB,CAACG,MAAM,KAAK,CAAC,EAAE;IAChCjB,OAAO,CAACC,GAAG,CAAC,uEAAuE,CAAC;IACpF;EACJ;EAEAD,OAAO,CAACC,GAAG,CAAC,sCAAsCa,iBAAiB,CAACI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;EAEjF,KAAK,IAAIH,QAAQ,IAAID,iBAAiB,EAAE;IACpC,MAAMN,EAAE,GAAG,MAAMZ,QAAQ,CAACa,iBAAiB,CAACM,QAAQ,EAAE,KAAK,CAAC;IAC5D,MAAMP,EAAE,CAACE,IAAI,CAAC,CAAC;IACfV,OAAO,CAACC,GAAG,CAAC,2BAA2Bc,QAAQ,EAAE,CAAC;EACtD;EAEAf,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}