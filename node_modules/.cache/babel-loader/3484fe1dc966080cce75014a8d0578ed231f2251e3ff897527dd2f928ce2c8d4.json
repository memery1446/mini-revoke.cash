{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MockEIP1193Provider = void 0;\nconst eventemitter3_1 = require(\"eventemitter3\");\nclass MockEIP1193Provider extends eventemitter3_1.EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.eth_chainId = jest.fn(chainId => chainId);\n    this.eth_accounts = jest.fn(accounts => accounts);\n    this.eth_requestAccounts = jest.fn(accounts => accounts);\n  }\n  request(x) {\n    // make sure to throw if we're \"not connected\"\n    if (!this.chainId) return Promise.reject(new Error());\n    switch (x.method) {\n      case 'eth_chainId':\n        return Promise.resolve(this.eth_chainId(this.chainId));\n      case 'eth_accounts':\n        return Promise.resolve(this.eth_accounts(this.accounts));\n      case 'eth_requestAccounts':\n        return Promise.resolve(this.eth_requestAccounts(this.accounts));\n      default:\n        throw new Error(`Method not supported on mock: ${JSON.stringify(x)}`);\n    }\n  }\n  emitConnect(chainId) {\n    this.emit('connect', {\n      chainId\n    });\n  }\n  emitDisconnect(error) {\n    this.emit('disconnect', error);\n  }\n  emitChainChanged(chainId) {\n    this.emit('chainChanged', chainId);\n  }\n  emitAccountsChanged(accounts) {\n    this.emit('accountsChanged', accounts);\n  }\n}\nexports.MockEIP1193Provider = MockEIP1193Provider;","map":{"version":3,"names":["Object","defineProperty","exports","value","MockEIP1193Provider","eventemitter3_1","require","EventEmitter","constructor","arguments","eth_chainId","jest","fn","chainId","eth_accounts","accounts","eth_requestAccounts","request","x","Promise","reject","Error","method","resolve","JSON","stringify","emitConnect","emit","emitDisconnect","error","emitChainChanged","emitAccountsChanged"],"sources":["/Users/markemery/mini.revoke/node_modules/@web3-react/core/dist/mocks.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MockEIP1193Provider = void 0;\nconst eventemitter3_1 = require(\"eventemitter3\");\nclass MockEIP1193Provider extends eventemitter3_1.EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.eth_chainId = jest.fn((chainId) => chainId);\n        this.eth_accounts = jest.fn((accounts) => accounts);\n        this.eth_requestAccounts = jest.fn((accounts) => accounts);\n    }\n    request(x) {\n        // make sure to throw if we're \"not connected\"\n        if (!this.chainId)\n            return Promise.reject(new Error());\n        switch (x.method) {\n            case 'eth_chainId':\n                return Promise.resolve(this.eth_chainId(this.chainId));\n            case 'eth_accounts':\n                return Promise.resolve(this.eth_accounts(this.accounts));\n            case 'eth_requestAccounts':\n                return Promise.resolve(this.eth_requestAccounts(this.accounts));\n            default:\n                throw new Error(`Method not supported on mock: ${JSON.stringify(x)}`);\n        }\n    }\n    emitConnect(chainId) {\n        this.emit('connect', { chainId });\n    }\n    emitDisconnect(error) {\n        this.emit('disconnect', error);\n    }\n    emitChainChanged(chainId) {\n        this.emit('chainChanged', chainId);\n    }\n    emitAccountsChanged(accounts) {\n        this.emit('accountsChanged', accounts);\n    }\n}\nexports.MockEIP1193Provider = MockEIP1193Provider;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,MAAMC,eAAe,GAAGC,OAAO,CAAC,eAAe,CAAC;AAChD,MAAMF,mBAAmB,SAASC,eAAe,CAACE,YAAY,CAAC;EAC3DC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,WAAW,GAAGC,IAAI,CAACC,EAAE,CAAEC,OAAO,IAAKA,OAAO,CAAC;IAChD,IAAI,CAACC,YAAY,GAAGH,IAAI,CAACC,EAAE,CAAEG,QAAQ,IAAKA,QAAQ,CAAC;IACnD,IAAI,CAACC,mBAAmB,GAAGL,IAAI,CAACC,EAAE,CAAEG,QAAQ,IAAKA,QAAQ,CAAC;EAC9D;EACAE,OAAOA,CAACC,CAAC,EAAE;IACP;IACA,IAAI,CAAC,IAAI,CAACL,OAAO,EACb,OAAOM,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,CAAC,CAAC;IACtC,QAAQH,CAAC,CAACI,MAAM;MACZ,KAAK,aAAa;QACd,OAAOH,OAAO,CAACI,OAAO,CAAC,IAAI,CAACb,WAAW,CAAC,IAAI,CAACG,OAAO,CAAC,CAAC;MAC1D,KAAK,cAAc;QACf,OAAOM,OAAO,CAACI,OAAO,CAAC,IAAI,CAACT,YAAY,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC;MAC5D,KAAK,qBAAqB;QACtB,OAAOI,OAAO,CAACI,OAAO,CAAC,IAAI,CAACP,mBAAmB,CAAC,IAAI,CAACD,QAAQ,CAAC,CAAC;MACnE;QACI,MAAM,IAAIM,KAAK,CAAC,iCAAiCG,IAAI,CAACC,SAAS,CAACP,CAAC,CAAC,EAAE,CAAC;IAC7E;EACJ;EACAQ,WAAWA,CAACb,OAAO,EAAE;IACjB,IAAI,CAACc,IAAI,CAAC,SAAS,EAAE;MAAEd;IAAQ,CAAC,CAAC;EACrC;EACAe,cAAcA,CAACC,KAAK,EAAE;IAClB,IAAI,CAACF,IAAI,CAAC,YAAY,EAAEE,KAAK,CAAC;EAClC;EACAC,gBAAgBA,CAACjB,OAAO,EAAE;IACtB,IAAI,CAACc,IAAI,CAAC,cAAc,EAAEd,OAAO,CAAC;EACtC;EACAkB,mBAAmBA,CAAChB,QAAQ,EAAE;IAC1B,IAAI,CAACY,IAAI,CAAC,iBAAiB,EAAEZ,QAAQ,CAAC;EAC1C;AACJ;AACAb,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}