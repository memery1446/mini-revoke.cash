{"ast":null,"code":"import { ethers } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n  const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n  let approvals = [];\n\n  // Hardcoded spender address (update if necessary)\n  const spenderAddresses = [\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"];\n  try {\n    if (!ethers.utils.isAddress(ownerAddress)) {\n      throw new Error(`Invalid owner address: ${ownerAddress}`);\n    }\n    const owner = ethers.utils.getAddress(ownerAddress);\n    const signer = provider.getSigner();\n    console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n    for (let tokenAddress of tokenContracts) {\n      if (!ethers.utils.isAddress(tokenAddress)) {\n        console.error(`‚ùå Invalid token address: ${tokenAddress}`);\n        continue;\n      }\n      try {\n        const contract = new ethers.Contract(tokenAddress, abi, signer);\n        for (let spender of spenderAddresses) {\n          console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n          try {\n            const allowance = await contract.allowance(owner, spender);\n            if (allowance.gt(0)) {\n              approvals.push({\n                contract: tokenAddress,\n                type: \"ERC-20\",\n                spender: spender,\n                amount: allowance.toString()\n              });\n            }\n          } catch (error) {\n            console.error(`‚ùå Error fetching allowance for spender: ${spender} on token: ${tokenAddress}`, error);\n          }\n        }\n      } catch (error) {\n        console.error(`‚ùå Error creating contract for token: ${tokenAddress}`, error);\n      }\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n  }\n  return approvals;\n}","map":{"version":3,"names":["ethers","getERC20Approvals","tokenContracts","ownerAddress","provider","abi","approvals","spenderAddresses","utils","isAddress","Error","owner","getAddress","signer","getSigner","console","log","tokenAddress","error","contract","Contract","spender","allowance","gt","push","type","amount","toString"],"sources":["/Users/markemery/mini.revoke/src/utils/erc20Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n    const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n    let approvals = [];\n\n    // Hardcoded spender address (update if necessary)\n    const spenderAddresses = [\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"];\n\n    try {\n        if (!ethers.utils.isAddress(ownerAddress)) {\n            throw new Error(`Invalid owner address: ${ownerAddress}`);\n        }\n        const owner = ethers.utils.getAddress(ownerAddress);\n        const signer = provider.getSigner();\n\n        console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n\n        for (let tokenAddress of tokenContracts) {\n            if (!ethers.utils.isAddress(tokenAddress)) {\n                console.error(`‚ùå Invalid token address: ${tokenAddress}`);\n                continue;\n            }\n\n            try {\n                const contract = new ethers.Contract(tokenAddress, abi, signer);\n\n                for (let spender of spenderAddresses) {\n                    console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n\n                    try {\n                        const allowance = await contract.allowance(owner, spender);\n                        if (allowance.gt(0)) {\n                            approvals.push({\n                                contract: tokenAddress,\n                                type: \"ERC-20\",\n                                spender: spender,\n                                amount: allowance.toString(),\n                            });\n                        }\n                    } catch (error) {\n                        console.error(`‚ùå Error fetching allowance for spender: ${spender} on token: ${tokenAddress}`, error);\n                    }\n                }\n            } catch (error) {\n                console.error(`‚ùå Error creating contract for token: ${tokenAddress}`, error);\n            }\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in getERC20Approvals function:\", error);\n    }\n\n    return approvals;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAO,eAAeC,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAC5E,MAAMC,GAAG,GAAG,CAAC,2EAA2E,CAAC;EACzF,IAAIC,SAAS,GAAG,EAAE;;EAElB;EACA,MAAMC,gBAAgB,GAAG,CAAC,4CAA4C,CAAC;EAEvE,IAAI;IACA,IAAI,CAACP,MAAM,CAACQ,KAAK,CAACC,SAAS,CAACN,YAAY,CAAC,EAAE;MACvC,MAAM,IAAIO,KAAK,CAAC,0BAA0BP,YAAY,EAAE,CAAC;IAC7D;IACA,MAAMQ,KAAK,GAAGX,MAAM,CAACQ,KAAK,CAACI,UAAU,CAACT,YAAY,CAAC;IACnD,MAAMU,MAAM,GAAGT,QAAQ,CAACU,SAAS,CAAC,CAAC;IAEnCC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEd,cAAc,CAAC;IAE/D,KAAK,IAAIe,YAAY,IAAIf,cAAc,EAAE;MACrC,IAAI,CAACF,MAAM,CAACQ,KAAK,CAACC,SAAS,CAACQ,YAAY,CAAC,EAAE;QACvCF,OAAO,CAACG,KAAK,CAAC,4BAA4BD,YAAY,EAAE,CAAC;QACzD;MACJ;MAEA,IAAI;QACA,MAAME,QAAQ,GAAG,IAAInB,MAAM,CAACoB,QAAQ,CAACH,YAAY,EAAEZ,GAAG,EAAEQ,MAAM,CAAC;QAE/D,KAAK,IAAIQ,OAAO,IAAId,gBAAgB,EAAE;UAClCQ,OAAO,CAACC,GAAG,CAAC,uCAAuCK,OAAO,EAAE,CAAC;UAE7D,IAAI;YACA,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACG,SAAS,CAACX,KAAK,EAAEU,OAAO,CAAC;YAC1D,IAAIC,SAAS,CAACC,EAAE,CAAC,CAAC,CAAC,EAAE;cACjBjB,SAAS,CAACkB,IAAI,CAAC;gBACXL,QAAQ,EAAEF,YAAY;gBACtBQ,IAAI,EAAE,QAAQ;gBACdJ,OAAO,EAAEA,OAAO;gBAChBK,MAAM,EAAEJ,SAAS,CAACK,QAAQ,CAAC;cAC/B,CAAC,CAAC;YACN;UACJ,CAAC,CAAC,OAAOT,KAAK,EAAE;YACZH,OAAO,CAACG,KAAK,CAAC,2CAA2CG,OAAO,cAAcJ,YAAY,EAAE,EAAEC,KAAK,CAAC;UACxG;QACJ;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,wCAAwCD,YAAY,EAAE,EAAEC,KAAK,CAAC;MAChF;IACJ;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAClE;EAEA,OAAOZ,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}