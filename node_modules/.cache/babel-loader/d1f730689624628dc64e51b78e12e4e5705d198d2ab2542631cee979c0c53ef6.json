{"ast":null,"code":"import { ethers, Contract } from \"ethers\"; // ✅ Updated for Ethers v6\nconst ZeroAddress = \"0x0000000000000000000000000000000000000000\";\n\n/** Function to get ERC-721 Approvals */\nexport async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n  const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function getApproved(uint256 tokenId) view returns (address)\"];\n  const contract = new Contract(nftContractAddress, abi, provider);\n  const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Temporary placeholder\n\n  const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n  console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n  const approvedForToken = await contract.getApproved(1);\n  console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n  return {\n    isApprovedForAll,\n    approvedForToken\n  };\n}\n\n/** Function to revoke ERC-721 Approvals */\nexport async function revokeERC721Approval(nftContractAddress, tokenId) {\n  const provider = new BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const abi = [\"function approve(address to, uint256 tokenId)\"];\n  const contract = new Contract(nftContractAddress, abi, signer);\n  const tx = await contract.approve(ZeroAddress, tokenId);\n  await tx.wait();\n  console.log(`✅ Approval revoked for token ${tokenId}`);\n}\n\n/** Function to batch revoke ERC-721 approvals */\nexport async function batchRevokeERC721Approvals(nftContractAddress, signer, tokenIds) {\n  const abi = [\"function batchRevokeApprovals(uint256[] memory tokenIds)\"];\n  const contract = new Contract(nftContractAddress, abi, signer);\n  console.log(\"⏳ Revoking multiple ERC-721 approvals...\");\n  const tx = await contract.batchRevokeApprovals(tokenIds);\n  await tx.wait();\n  console.log(`✅ ERC-721 Approvals Revoked for tokens: ${tokenIds.join(\", \")}`);\n}","map":{"version":3,"names":["ethers","Contract","ZeroAddress","getERC721Approvals","nftContractAddress","ownerAddress","provider","abi","contract","marketplaceAddress","isApprovedForAll","console","log","approvedForToken","getApproved","revokeERC721Approval","tokenId","BrowserProvider","window","ethereum","signer","getSigner","tx","approve","wait","batchRevokeERC721Approvals","tokenIds","batchRevokeApprovals","join"],"sources":["/Users/markemery/mini.revoke/src/utils/nftApprovals.js"],"sourcesContent":["import { ethers, Contract } from \"ethers\"; // ✅ Updated for Ethers v6\nconst ZeroAddress = \"0x0000000000000000000000000000000000000000\";\n\n\n/** Function to get ERC-721 Approvals */\nexport async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n    const abi = [\n        \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n        \"function getApproved(uint256 tokenId) view returns (address)\"\n    ];\n    \n    const contract = new Contract(nftContractAddress, abi, provider);\n    const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Temporary placeholder\n\n    const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n    console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n\n    const approvedForToken = await contract.getApproved(1);\n    console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n\n    return { isApprovedForAll, approvedForToken };\n}\n\n/** Function to revoke ERC-721 Approvals */\nexport async function revokeERC721Approval(nftContractAddress, tokenId) {\n    const provider = new BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    \n    const abi = [\"function approve(address to, uint256 tokenId)\"];\n    const contract = new Contract(nftContractAddress, abi, signer);\n\n    const tx = await contract.approve(ZeroAddress, tokenId);\n    await tx.wait();\n    console.log(`✅ Approval revoked for token ${tokenId}`);\n}\n\n/** Function to batch revoke ERC-721 approvals */\nexport async function batchRevokeERC721Approvals(nftContractAddress, signer, tokenIds) {\n    const abi = [\"function batchRevokeApprovals(uint256[] memory tokenIds)\"];\n    const contract = new Contract(nftContractAddress, abi, signer);\n\n    console.log(\"⏳ Revoking multiple ERC-721 approvals...\");\n    \n    const tx = await contract.batchRevokeApprovals(tokenIds);\n    await tx.wait();\n\n    console.log(`✅ ERC-721 Approvals Revoked for tokens: ${tokenIds.join(\", \")}`);\n}\n\n\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,QAAQ,CAAC,CAAC;AAC3C,MAAMC,WAAW,GAAG,4CAA4C;;AAGhE;AACA,OAAO,eAAeC,kBAAkBA,CAACC,kBAAkB,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EACjF,MAAMC,GAAG,GAAG,CACR,gFAAgF,EAChF,8DAA8D,CACjE;EAED,MAAMC,QAAQ,GAAG,IAAIP,QAAQ,CAACG,kBAAkB,EAAEG,GAAG,EAAED,QAAQ,CAAC;EAChE,MAAMG,kBAAkB,GAAG,4CAA4C,CAAC,CAAC;;EAEzE,MAAMC,gBAAgB,GAAG,MAAMF,QAAQ,CAACE,gBAAgB,CAACL,YAAY,EAAEI,kBAAkB,CAAC;EAC1FE,OAAO,CAACC,GAAG,CAAC,8BAA8BF,gBAAgB,EAAE,CAAC;EAE7D,MAAMG,gBAAgB,GAAG,MAAML,QAAQ,CAACM,WAAW,CAAC,CAAC,CAAC;EACtDH,OAAO,CAACC,GAAG,CAAC,sCAAsCC,gBAAgB,EAAE,CAAC;EAErE,OAAO;IAAEH,gBAAgB;IAAEG;EAAiB,CAAC;AACjD;;AAEA;AACA,OAAO,eAAeE,oBAAoBA,CAACX,kBAAkB,EAAEY,OAAO,EAAE;EACpE,MAAMV,QAAQ,GAAG,IAAIW,eAAe,CAACC,MAAM,CAACC,QAAQ,CAAC;EACrD,MAAMC,MAAM,GAAG,MAAMd,QAAQ,CAACe,SAAS,CAAC,CAAC;EAEzC,MAAMd,GAAG,GAAG,CAAC,+CAA+C,CAAC;EAC7D,MAAMC,QAAQ,GAAG,IAAIP,QAAQ,CAACG,kBAAkB,EAAEG,GAAG,EAAEa,MAAM,CAAC;EAE9D,MAAME,EAAE,GAAG,MAAMd,QAAQ,CAACe,OAAO,CAACrB,WAAW,EAAEc,OAAO,CAAC;EACvD,MAAMM,EAAE,CAACE,IAAI,CAAC,CAAC;EACfb,OAAO,CAACC,GAAG,CAAC,gCAAgCI,OAAO,EAAE,CAAC;AAC1D;;AAEA;AACA,OAAO,eAAeS,0BAA0BA,CAACrB,kBAAkB,EAAEgB,MAAM,EAAEM,QAAQ,EAAE;EACnF,MAAMnB,GAAG,GAAG,CAAC,0DAA0D,CAAC;EACxE,MAAMC,QAAQ,GAAG,IAAIP,QAAQ,CAACG,kBAAkB,EAAEG,GAAG,EAAEa,MAAM,CAAC;EAE9DT,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;EAEvD,MAAMU,EAAE,GAAG,MAAMd,QAAQ,CAACmB,oBAAoB,CAACD,QAAQ,CAAC;EACxD,MAAMJ,EAAE,CAACE,IAAI,CAAC,CAAC;EAEfb,OAAO,CAACC,GAAG,CAAC,2CAA2Cc,QAAQ,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}