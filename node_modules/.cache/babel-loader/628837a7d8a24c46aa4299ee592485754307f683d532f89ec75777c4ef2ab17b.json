{"ast":null,"code":"import { ethers } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n  const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n  let approvals = [];\n\n  // ‚úÖ Use a valid spender address (avoid ENS resolution issues)\n  const spenderAddresses = [\"0x000000000000000000000000000000000000dead\" // Use a dummy non-zero address\n  ];\n\n  // ‚úÖ Ensure owner address is checksummed\n  const owner = ethers.utils.getAddress(ownerAddress);\n\n  // ‚úÖ Get a signer from the provider\n  const signer = provider.getSigner();\n  console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n  for (let tokenAddress of tokenContracts) {\n    try {\n      const contract = new ethers.Contract(ethers.utils.getAddress(tokenAddress),\n      // Ensure checksum format\n      abi, signer // Use signer instead of undefined variable\n      );\n      for (let spender of spenderAddresses) {\n        console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n        try {\n          const allowance = await contract.allowance(owner, spender);\n          if (allowance > 0) {\n            approvals.push({\n              contract: tokenAddress,\n              type: \"ERC-20\",\n              spender: spender,\n              amount: allowance.toString()\n            });\n          }\n        } catch (error) {\n          console.error(`‚ùå Error fetching allowance for spender: ${spender}`, error);\n        }\n      }\n    } catch (error) {\n      console.error(`‚ùå Error creating contract for token: ${tokenAddress}`, error);\n    }\n  }\n  console.log(\"‚úÖ ERC-20 Approvals Fetched:\", approvals);\n  return approvals;\n}","map":{"version":3,"names":["ethers","getERC20Approvals","tokenContracts","ownerAddress","provider","abi","approvals","spenderAddresses","owner","utils","getAddress","signer","getSigner","console","log","tokenAddress","contract","Contract","spender","allowance","push","type","amount","toString","error"],"sources":["/Users/markemery/mini.revoke/src/utils/erc20Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\n/** Function to get ERC-20 Approvals */\nexport async function getERC20Approvals(tokenContracts, ownerAddress, provider) {\n    const abi = [\"function allowance(address owner, address spender) view returns (uint256)\"];\n\n    let approvals = [];\n\n    // ‚úÖ Use a valid spender address (avoid ENS resolution issues)\n    const spenderAddresses = [\n        \"0x000000000000000000000000000000000000dead\", // Use a dummy non-zero address\n    ];\n\n    // ‚úÖ Ensure owner address is checksummed\n    const owner = ethers.utils.getAddress(ownerAddress);\n\n    // ‚úÖ Get a signer from the provider\n    const signer = provider.getSigner();\nconsole.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n\n    for (let tokenAddress of tokenContracts) {\n        try {\n            const contract = new ethers.Contract(\n                ethers.utils.getAddress(tokenAddress), // Ensure checksum format\n                abi,\n                signer // Use signer instead of undefined variable\n            );\n\n            for (let spender of spenderAddresses) {\n                console.log(`üõ†Ô∏è Checking allowance for spender: ${spender}`);\n\n                try {\n                    const allowance = await contract.allowance(owner, spender);\n                    if (allowance > 0) {\n                        approvals.push({\n                            contract: tokenAddress,\n                            type: \"ERC-20\",\n                            spender: spender,\n                            amount: allowance.toString(),\n                        });\n                    }\n                } catch (error) {\n                    console.error(`‚ùå Error fetching allowance for spender: ${spender}`, error);\n                }\n            }\n        } catch (error) {\n            console.error(`‚ùå Error creating contract for token: ${tokenAddress}`, error);\n        }\n    }\n\n    console.log(\"‚úÖ ERC-20 Approvals Fetched:\", approvals);\n    return approvals;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAO,eAAeC,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAC5E,MAAMC,GAAG,GAAG,CAAC,2EAA2E,CAAC;EAEzF,IAAIC,SAAS,GAAG,EAAE;;EAElB;EACA,MAAMC,gBAAgB,GAAG,CACrB,4CAA4C,CAAE;EAAA,CACjD;;EAED;EACA,MAAMC,KAAK,GAAGR,MAAM,CAACS,KAAK,CAACC,UAAU,CAACP,YAAY,CAAC;;EAEnD;EACA,MAAMQ,MAAM,GAAGP,QAAQ,CAACQ,SAAS,CAAC,CAAC;EACvCC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEZ,cAAc,CAAC;EAE3D,KAAK,IAAIa,YAAY,IAAIb,cAAc,EAAE;IACrC,IAAI;MACA,MAAMc,QAAQ,GAAG,IAAIhB,MAAM,CAACiB,QAAQ,CAChCjB,MAAM,CAACS,KAAK,CAACC,UAAU,CAACK,YAAY,CAAC;MAAE;MACvCV,GAAG,EACHM,MAAM,CAAC;MACX,CAAC;MAED,KAAK,IAAIO,OAAO,IAAIX,gBAAgB,EAAE;QAClCM,OAAO,CAACC,GAAG,CAAC,uCAAuCI,OAAO,EAAE,CAAC;QAE7D,IAAI;UACA,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACG,SAAS,CAACX,KAAK,EAAEU,OAAO,CAAC;UAC1D,IAAIC,SAAS,GAAG,CAAC,EAAE;YACfb,SAAS,CAACc,IAAI,CAAC;cACXJ,QAAQ,EAAED,YAAY;cACtBM,IAAI,EAAE,QAAQ;cACdH,OAAO,EAAEA,OAAO;cAChBI,MAAM,EAAEH,SAAS,CAACI,QAAQ,CAAC;YAC/B,CAAC,CAAC;UACN;QACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZX,OAAO,CAACW,KAAK,CAAC,2CAA2CN,OAAO,EAAE,EAAEM,KAAK,CAAC;QAC9E;MACJ;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZX,OAAO,CAACW,KAAK,CAAC,wCAAwCT,YAAY,EAAE,EAAES,KAAK,CAAC;IAChF;EACJ;EAEAX,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAER,SAAS,CAAC;EACrD,OAAOA,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}