{"ast":null,"code":"import { ethers } from \"ethers\"; // Import ethers library\nimport getProvider from \"../utils/provider\"; // Importing the default export\nimport { ERC1155_ABI, CONTRACT_ADDRESSES } from \"../constants/abis\"; // Importing ABIs and addresses\n\nconst provider = getProvider(); // Get the provider\nconst erc1155Contract = new ethers.Contract(CONTRACT_ADDRESSES.ERC1155,\n// The ERC-1155 contract address\nERC1155_ABI,\n// The ABI of the ERC-1155 contract\nprovider);\n\n/**\n * Fetch ERC-1155 approvals for a given owner address.\n * @param {string} ownerAddress - The address of the token owner.\n * @returns {Promise<Array>} - A promise that resolves to an array of approvals.\n */\nconst getERC1155Approvals = async ownerAddress => {\n  try {\n    console.log(\"üîç Fetching ERC-1155 approvals for\", ownerAddress);\n    const spenderAddresses = [CONTRACT_ADDRESSES.MockSpender // Ensure this is a valid spender address\n    ];\n    let approvals = [];\n    for (let spender of spenderAddresses) {\n      console.log(\"Checking approval for spender:\", spender); // Log each spender's address\n\n      // Validate addresses before making calls\n      if (!ethers.utils.isAddress(ownerAddress) || !ethers.utils.isAddress(spender)) {\n        console.error(\"‚ùå Invalid address provided:\", {\n          ownerAddress,\n          spender\n        });\n        return []; // Exit if addresses are invalid\n      }\n      const isApproved = await erc1155Contract.isApprovedForAll(ownerAddress, spender);\n      approvals.push({\n        spender,\n        isApproved\n      });\n    }\n    return approvals;\n  } catch (error) {\n    console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error); // Detailed error logging\n    return []; // Return an empty array in case of an error\n  }\n};\n\n/**\n * Revoke approval for a specific ERC-1155 spender address.\n * @param {string} spenderAddress - The address of the spender to revoke approval for.\n * @returns {Promise<boolean>} - A promise that resolves to true if revoked successfully, or false.\n */\nasync function revokeERC1155Approval(spenderAddress) {\n  try {\n    console.log(\"üö® Revoking approval for ERC-1155 spender:\", spenderAddress);\n    const signer = provider.getSigner();\n    const contractWithSigner = erc1155Contract.connect(signer);\n    const tx = await contractWithSigner.setApprovalForAll(spenderAddress, false);\n    await tx.wait(); // Wait for transaction confirmation\n\n    console.log(\"‚úÖ Approval revoked successfully.\");\n    return true;\n  } catch (error) {\n    console.error(\"‚ùå Error revoking ERC-1155 approval:\", error); // Detailed error logging\n    return false; // Return false in case of an error\n  }\n}\n\n/**\n * Batch revoke approvals for multiple ERC-1155 spender addresses.\n * @param {Array<string>} spenderAddresses - The array of addresses to revoke approval for.\n * @returns {Promise<boolean>} - A promise that resolves to true if all approvals are revoked successfully, or false.\n */\nasync function batchRevokeERC1155Approvals(spenderAddresses) {\n  try {\n    console.log(\"üö® Revoking approvals for multiple ERC-1155 spenders:\", spenderAddresses);\n    const signer = provider.getSigner();\n    const contractWithSigner = erc1155Contract.connect(signer);\n    for (let spender of spenderAddresses) {\n      if (!ethers.utils.isAddress(spender)) {\n        console.error(`‚ùå Invalid spender address: ${spender}`);\n        continue; // Skip this spender if the address is invalid\n      }\n      const tx = await contractWithSigner.setApprovalForAll(spender, false);\n      await tx.wait(); // Wait for transaction confirmation\n    }\n    console.log(\"‚úÖ Batch approval revocations successful.\");\n    return true;\n  } catch (error) {\n    console.error(\"‚ùå Error in batch revoking ERC-1155 approvals:\", error); // Detailed error logging\n    return false; // Return false in case of an error\n  }\n}\nexport { getERC1155Approvals, revokeERC1155Approval, batchRevokeERC1155Approvals };","map":{"version":3,"names":["ethers","getProvider","ERC1155_ABI","CONTRACT_ADDRESSES","provider","erc1155Contract","Contract","ERC1155","getERC1155Approvals","ownerAddress","console","log","spenderAddresses","MockSpender","approvals","spender","utils","isAddress","error","isApproved","isApprovedForAll","push","revokeERC1155Approval","spenderAddress","signer","getSigner","contractWithSigner","connect","tx","setApprovalForAll","wait","batchRevokeERC1155Approvals"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\"; // Import ethers library\nimport getProvider from \"../utils/provider\"; // Importing the default export\nimport { ERC1155_ABI, CONTRACT_ADDRESSES } from \"../constants/abis\"; // Importing ABIs and addresses\n\nconst provider = getProvider(); // Get the provider\nconst erc1155Contract = new ethers.Contract(\n    CONTRACT_ADDRESSES.ERC1155, // The ERC-1155 contract address\n    ERC1155_ABI, // The ABI of the ERC-1155 contract\n    provider\n);\n\n/**\n * Fetch ERC-1155 approvals for a given owner address.\n * @param {string} ownerAddress - The address of the token owner.\n * @returns {Promise<Array>} - A promise that resolves to an array of approvals.\n */\nconst getERC1155Approvals = async (ownerAddress) => {\n    try {\n        console.log(\"üîç Fetching ERC-1155 approvals for\", ownerAddress);\n\n        const spenderAddresses = [\n            CONTRACT_ADDRESSES.MockSpender // Ensure this is a valid spender address\n        ];\n\n        let approvals = [];\n        for (let spender of spenderAddresses) {\n            console.log(\"Checking approval for spender:\", spender); // Log each spender's address\n\n            // Validate addresses before making calls\n            if (!ethers.utils.isAddress(ownerAddress) || !ethers.utils.isAddress(spender)) {\n                console.error(\"‚ùå Invalid address provided:\", { ownerAddress, spender });\n                return []; // Exit if addresses are invalid\n            }\n\n            const isApproved = await erc1155Contract.isApprovedForAll(ownerAddress, spender);\n            approvals.push({ spender, isApproved });\n        }\n\n        return approvals;\n    } catch (error) {\n        console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error); // Detailed error logging\n        return []; // Return an empty array in case of an error\n    }\n};\n\n/**\n * Revoke approval for a specific ERC-1155 spender address.\n * @param {string} spenderAddress - The address of the spender to revoke approval for.\n * @returns {Promise<boolean>} - A promise that resolves to true if revoked successfully, or false.\n */\nasync function revokeERC1155Approval(spenderAddress) {\n    try {\n        console.log(\"üö® Revoking approval for ERC-1155 spender:\", spenderAddress);\n        const signer = provider.getSigner();\n        const contractWithSigner = erc1155Contract.connect(signer);\n\n        const tx = await contractWithSigner.setApprovalForAll(spenderAddress, false);\n        await tx.wait(); // Wait for transaction confirmation\n\n        console.log(\"‚úÖ Approval revoked successfully.\");\n        return true;\n    } catch (error) {\n        console.error(\"‚ùå Error revoking ERC-1155 approval:\", error); // Detailed error logging\n        return false; // Return false in case of an error\n    }\n}\n\n/**\n * Batch revoke approvals for multiple ERC-1155 spender addresses.\n * @param {Array<string>} spenderAddresses - The array of addresses to revoke approval for.\n * @returns {Promise<boolean>} - A promise that resolves to true if all approvals are revoked successfully, or false.\n */\nasync function batchRevokeERC1155Approvals(spenderAddresses) {\n    try {\n        console.log(\"üö® Revoking approvals for multiple ERC-1155 spenders:\", spenderAddresses);\n        const signer = provider.getSigner();\n        const contractWithSigner = erc1155Contract.connect(signer);\n\n        for (let spender of spenderAddresses) {\n            if (!ethers.utils.isAddress(spender)) {\n                console.error(`‚ùå Invalid spender address: ${spender}`);\n                continue; // Skip this spender if the address is invalid\n            }\n            const tx = await contractWithSigner.setApprovalForAll(spender, false);\n            await tx.wait(); // Wait for transaction confirmation\n        }\n\n        console.log(\"‚úÖ Batch approval revocations successful.\");\n        return true;\n    } catch (error) {\n        console.error(\"‚ùå Error in batch revoking ERC-1155 approvals:\", error); // Detailed error logging\n        return false; // Return false in case of an error\n    }\n}\n\nexport { getERC1155Approvals, revokeERC1155Approval, batchRevokeERC1155Approvals };"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ,CAAC,CAAC;AACjC,OAAOC,WAAW,MAAM,mBAAmB,CAAC,CAAC;AAC7C,SAASC,WAAW,EAAEC,kBAAkB,QAAQ,mBAAmB,CAAC,CAAC;;AAErE,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC,CAAC,CAAC;AAChC,MAAMI,eAAe,GAAG,IAAIL,MAAM,CAACM,QAAQ,CACvCH,kBAAkB,CAACI,OAAO;AAAE;AAC5BL,WAAW;AAAE;AACbE,QACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMI,mBAAmB,GAAG,MAAOC,YAAY,IAAK;EAChD,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,YAAY,CAAC;IAE/D,MAAMG,gBAAgB,GAAG,CACrBT,kBAAkB,CAACU,WAAW,CAAC;IAAA,CAClC;IAED,IAAIC,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIC,OAAO,IAAIH,gBAAgB,EAAE;MAClCF,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEI,OAAO,CAAC,CAAC,CAAC;;MAExD;MACA,IAAI,CAACf,MAAM,CAACgB,KAAK,CAACC,SAAS,CAACR,YAAY,CAAC,IAAI,CAACT,MAAM,CAACgB,KAAK,CAACC,SAAS,CAACF,OAAO,CAAC,EAAE;QAC3EL,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAE;UAAET,YAAY;UAAEM;QAAQ,CAAC,CAAC;QACvE,OAAO,EAAE,CAAC,CAAC;MACf;MAEA,MAAMI,UAAU,GAAG,MAAMd,eAAe,CAACe,gBAAgB,CAACX,YAAY,EAAEM,OAAO,CAAC;MAChFD,SAAS,CAACO,IAAI,CAAC;QAAEN,OAAO;QAAEI;MAAW,CAAC,CAAC;IAC3C;IAEA,OAAOL,SAAS;EACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZR,OAAO,CAACQ,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC9D,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,eAAeI,qBAAqBA,CAACC,cAAc,EAAE;EACjD,IAAI;IACAb,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEY,cAAc,CAAC;IACzE,MAAMC,MAAM,GAAGpB,QAAQ,CAACqB,SAAS,CAAC,CAAC;IACnC,MAAMC,kBAAkB,GAAGrB,eAAe,CAACsB,OAAO,CAACH,MAAM,CAAC;IAE1D,MAAMI,EAAE,GAAG,MAAMF,kBAAkB,CAACG,iBAAiB,CAACN,cAAc,EAAE,KAAK,CAAC;IAC5E,MAAMK,EAAE,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;;IAEjBpB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/C,OAAO,IAAI;EACf,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZR,OAAO,CAACQ,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC7D,OAAO,KAAK,CAAC,CAAC;EAClB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAea,2BAA2BA,CAACnB,gBAAgB,EAAE;EACzD,IAAI;IACAF,OAAO,CAACC,GAAG,CAAC,uDAAuD,EAAEC,gBAAgB,CAAC;IACtF,MAAMY,MAAM,GAAGpB,QAAQ,CAACqB,SAAS,CAAC,CAAC;IACnC,MAAMC,kBAAkB,GAAGrB,eAAe,CAACsB,OAAO,CAACH,MAAM,CAAC;IAE1D,KAAK,IAAIT,OAAO,IAAIH,gBAAgB,EAAE;MAClC,IAAI,CAACZ,MAAM,CAACgB,KAAK,CAACC,SAAS,CAACF,OAAO,CAAC,EAAE;QAClCL,OAAO,CAACQ,KAAK,CAAC,8BAA8BH,OAAO,EAAE,CAAC;QACtD,SAAS,CAAC;MACd;MACA,MAAMa,EAAE,GAAG,MAAMF,kBAAkB,CAACG,iBAAiB,CAACd,OAAO,EAAE,KAAK,CAAC;MACrE,MAAMa,EAAE,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB;IAEApB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,OAAO,IAAI;EACf,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZR,OAAO,CAACQ,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC,CAAC,CAAC;IACvE,OAAO,KAAK,CAAC,CAAC;EAClB;AACJ;AAEA,SAASV,mBAAmB,EAAEc,qBAAqB,EAAES,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}