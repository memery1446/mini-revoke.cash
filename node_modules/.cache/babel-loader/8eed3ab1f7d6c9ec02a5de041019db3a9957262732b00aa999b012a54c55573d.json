{"ast":null,"code":"var _jsxFileName = \"/Users/markemery/mini.revoke/src/components/ExistingApprovals.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useSelector } from \"react-redux\";\nimport { getERC20Approvals } from \"../utils/erc20Approvals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExistingApprovals = () => {\n  _s();\n  const walletAddress = useSelector(state => state.wallet.address);\n  const [approvals, setApprovals] = useState([]);\n  useEffect(() => {\n    if (walletAddress) {\n      fetchApprovals();\n    }\n  }, [walletAddress]);\n  const fetchApprovals = async () => {\n    console.log(\"‚úÖ Fetching approvals...\");\n    try {\n      const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n      const signer = provider.getSigner(walletAddress);\n      const tokenContracts = [\"0xYourDeployedERC20Address1\", \"0xYourDeployedERC20Address2\"];\n      console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n      const results = await getERC20Approvals(walletAddress, signer, provider, tokenContracts);\n      setApprovals(results);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching approvals:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Existing Approvals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: approvals.map((approval, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [approval.token, \": \", approval.amount]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(ExistingApprovals, \"zAAc6ei+AWADibeTY2voHszhD2s=\", false, function () {\n  return [useSelector];\n});\n_c = ExistingApprovals;\nexport default ExistingApprovals;\nvar _c;\n$RefreshReg$(_c, \"ExistingApprovals\");","map":{"version":3,"names":["React","useState","useEffect","ethers","useSelector","getERC20Approvals","jsxDEV","_jsxDEV","ExistingApprovals","_s","walletAddress","state","wallet","address","approvals","setApprovals","fetchApprovals","console","log","provider","providers","JsonRpcProvider","signer","getSigner","tokenContracts","results","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","approval","index","token","amount","_c","$RefreshReg$"],"sources":["/Users/markemery/mini.revoke/src/components/ExistingApprovals.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useSelector } from \"react-redux\";\nimport { getERC20Approvals } from \"../utils/erc20Approvals\";\n\nconst ExistingApprovals = () => {\n    const walletAddress = useSelector((state) => state.wallet.address);\n    const [approvals, setApprovals] = useState([]);\n\n    useEffect(() => {\n        if (walletAddress) {\n            fetchApprovals();\n        }\n    }, [walletAddress]);\n\n    const fetchApprovals = async () => {\n        console.log(\"‚úÖ Fetching approvals...\");\n        try {\n            const provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:8545\");\n            const signer = provider.getSigner(walletAddress);\n            \n            const tokenContracts = [\n                \"0xYourDeployedERC20Address1\", \n                \"0xYourDeployedERC20Address2\"\n            ];\n            \n            console.log(\"üîç Debug: Token Contracts Input:\", tokenContracts);\n            \n            const results = await getERC20Approvals(walletAddress, signer, provider, tokenContracts);\n            setApprovals(results);\n        } catch (error) {\n            console.error(\"‚ùå Error fetching approvals:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Existing Approvals</h2>\n            <ul>\n                {approvals.map((approval, index) => (\n                    <li key={index}>{approval.token}: {approval.amount}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default ExistingApprovals;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,iBAAiB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,aAAa,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC;EAClE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZ,IAAIQ,aAAa,EAAE;MACfM,cAAc,CAAC,CAAC;IACpB;EACJ,CAAC,EAAE,CAACN,aAAa,CAAC,CAAC;EAEnB,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/BC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,IAAI;MACA,MAAMC,QAAQ,GAAG,IAAIhB,MAAM,CAACiB,SAAS,CAACC,eAAe,CAAC,uBAAuB,CAAC;MAC9E,MAAMC,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAACb,aAAa,CAAC;MAEhD,MAAMc,cAAc,GAAG,CACnB,6BAA6B,EAC7B,6BAA6B,CAChC;MAEDP,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEM,cAAc,CAAC;MAE/D,MAAMC,OAAO,GAAG,MAAMpB,iBAAiB,CAACK,aAAa,EAAEY,MAAM,EAAEH,QAAQ,EAAEK,cAAc,CAAC;MACxFT,YAAY,CAACU,OAAO,CAAC;IACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZT,OAAO,CAACS,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAED,oBACInB,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BxB,OAAA;MAAAoB,QAAA,EACKb,SAAS,CAACkB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC3B3B,OAAA;QAAAoB,QAAA,GAAiBM,QAAQ,CAACE,KAAK,EAAC,IAAE,EAACF,QAAQ,CAACG,MAAM;MAAA,GAAzCF,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyC,CAC1D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACtB,EAAA,CAxCID,iBAAiB;EAAA,QACGJ,WAAW;AAAA;AAAAiC,EAAA,GAD/B7B,iBAAiB;AA0CvB,eAAeA,iBAAiB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}