{"ast":null,"code":"var _jsxFileName = \"/Users/markemery/mini.revoke/src/components/NFTApprovals.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Web3Provider, Contract } from \"ethers\"; // ✅ Ensure correct import\nimport { getERC721Approvals, revokeERC721Approval } from \"../utils/nftApprovals\"; // ✅ Import functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTApprovals = ({\n  contractAddress\n}) => {\n  _s();\n  const [approvals, setApprovals] = useState(null);\n  useEffect(() => {\n    const fetchApprovals = async () => {\n      if (!window.ethereum) {\n        console.error(\"❌ MetaMask (or another wallet) is not installed!\");\n        return;\n      }\n      try {\n        const provider = new BrowserProvider(window.ethereum); // ✅ Corrected reference\n        const signer = await provider.getSigner();\n        const ownerAddress = await signer.getAddress();\n        const approvalsData = await getERC721Approvals(contractAddress, ownerAddress, provider);\n        setApprovals(approvalsData);\n      } catch (error) {\n        console.error(\"❌ Error fetching approvals:\", error);\n      }\n    };\n    fetchApprovals();\n  }, [contractAddress]);\n\n  /** Handle Revoking Approval */\n  const handleRevoke = async () => {\n    await revokeERC721Approval(contractAddress, 1); // ✅ Example with Token ID 1\n    alert(\"Approval Revoked! Refreshing data...\");\n    window.location.reload(); // ✅ Quick way to refresh UI state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"NFT Approvals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), approvals ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Global Approval: \", approvals.isApprovedForAll ? \"✅ Yes\" : \"❌ No\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Token ID 1 Approval: \", approvals.approvedForToken || \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading approvals...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), approvals && approvals.approvedForToken && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRevoke,\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\"\n      },\n      children: \"Revoke Approval for Token ID 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(NFTApprovals, \"CZiEPxUnFzh4w/Y4T3BlEBvC5Kw=\");\n_c = NFTApprovals;\nexport default NFTApprovals;\nvar _c;\n$RefreshReg$(_c, \"NFTApprovals\");","map":{"version":3,"names":["React","useState","useEffect","Web3Provider","Contract","getERC721Approvals","revokeERC721Approval","jsxDEV","_jsxDEV","NFTApprovals","contractAddress","_s","approvals","setApprovals","fetchApprovals","window","ethereum","console","error","provider","BrowserProvider","signer","getSigner","ownerAddress","getAddress","approvalsData","handleRevoke","alert","location","reload","children","fileName","_jsxFileName","lineNumber","columnNumber","isApprovedForAll","approvedForToken","onClick","style","marginTop","padding","_c","$RefreshReg$"],"sources":["/Users/markemery/mini.revoke/src/components/NFTApprovals.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Web3Provider, Contract } from \"ethers\"; // ✅ Ensure correct import\nimport { getERC721Approvals, revokeERC721Approval } from \"../utils/nftApprovals\"; // ✅ Import functions\n\n\nconst NFTApprovals = ({ contractAddress }) => {\n    const [approvals, setApprovals] = useState(null);\n\n    useEffect(() => {\n        const fetchApprovals = async () => {\n            if (!window.ethereum) {\n                console.error(\"❌ MetaMask (or another wallet) is not installed!\");\n                return;\n            }\n\n            try {\n                const provider = new BrowserProvider(window.ethereum); // ✅ Corrected reference\n                const signer = await provider.getSigner();\n                const ownerAddress = await signer.getAddress();\n\n                const approvalsData = await getERC721Approvals(contractAddress, ownerAddress, provider);\n                setApprovals(approvalsData);\n            } catch (error) {\n                console.error(\"❌ Error fetching approvals:\", error);\n            }\n        };\n\n        fetchApprovals();\n    }, [contractAddress]);\n\n    /** Handle Revoking Approval */\n    const handleRevoke = async () => {\n        await revokeERC721Approval(contractAddress, 1); // ✅ Example with Token ID 1\n        alert(\"Approval Revoked! Refreshing data...\");\n        window.location.reload(); // ✅ Quick way to refresh UI state\n    };\n\n    return (\n        <div>\n            <h2>NFT Approvals</h2>\n            {approvals ? (\n                <ul>\n                    <li>Global Approval: {approvals.isApprovedForAll ? \"✅ Yes\" : \"❌ No\"}</li>\n                    <li>Token ID 1 Approval: {approvals.approvedForToken || \"None\"}</li>\n                </ul>\n            ) : (\n                <p>Loading approvals...</p>\n            )}\n\n            {/* ✅ Add button to revoke approval */}\n            {approvals && approvals.approvedForToken && (\n                <button onClick={handleRevoke} style={{ marginTop: \"10px\", padding: \"10px\" }}>\n                    Revoke Approval for Token ID 1\n                </button>\n            )}\n        </div>\n    );\n};\n\nexport default NFTApprovals;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}