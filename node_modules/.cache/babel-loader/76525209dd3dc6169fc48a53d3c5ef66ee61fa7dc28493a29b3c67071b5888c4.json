{"ast":null,"code":"import { BrowserProvider, Contract, ZeroAddress } from \"ethers\"; // ✅ Updated for Ethers v6\n\n/** Function to get ERC-721 Approvals */\nexport async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n  const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function getApproved(uint256 tokenId) view returns (address)\"];\n  const contract = new Contract(nftContractAddress, abi, provider);\n\n  // Replace with actual marketplace (e.g., OpenSea, Blur, etc.)\n  const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Temporary placeholder\n\n  // Check if the owner has globally approved a marketplace\n  const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n  console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n\n  // Check approval for a specific NFT ID (assuming Token ID = 1 exists)\n  const approvedForToken = await contract.getApproved(1);\n  console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n  return {\n    isApprovedForAll,\n    approvedForToken\n  };\n}\n\n/** Function to revoke ERC-721 Approvals */\nexport async function revokeERC721Approval(nftContractAddress, tokenId) {\n  const provider = new BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const abi = [\"function approve(address to, uint256 tokenId)\", \"function setApprovalForAll(address operator, bool approved)\"];\n  const contract = new Contract(nftContractAddress, abi, signer);\n\n  // ✅ Revoke approval by setting it to the zero address\n  const tx = await contract.approve(ZeroAddress, tokenId);\n  await tx.wait();\n  console.log(`✅ Approval revoked for token ${tokenId}`);\n}","map":{"version":3,"names":["BrowserProvider","Contract","ZeroAddress","getERC721Approvals","nftContractAddress","ownerAddress","provider","abi","contract","marketplaceAddress","isApprovedForAll","console","log","approvedForToken","getApproved","revokeERC721Approval","tokenId","window","ethereum","signer","getSigner","tx","approve","wait"],"sources":["/Users/markemery/mini.revoke/src/utils/nftApprovals.js"],"sourcesContent":["import { BrowserProvider, Contract, ZeroAddress } from \"ethers\"; // ✅ Updated for Ethers v6\n\n/** Function to get ERC-721 Approvals */\nexport async function getERC721Approvals(nftContractAddress, ownerAddress, provider) {\n    const abi = [\n        \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n        \"function getApproved(uint256 tokenId) view returns (address)\"\n    ];\n    \n    const contract = new Contract(nftContractAddress, abi, provider);\n\n    // Replace with actual marketplace (e.g., OpenSea, Blur, etc.)\n    const marketplaceAddress = \"0x0000000000000000000000000000000000000000\"; // Temporary placeholder\n\n    // Check if the owner has globally approved a marketplace\n    const isApprovedForAll = await contract.isApprovedForAll(ownerAddress, marketplaceAddress);\n    console.log(`✅ Global Approval for All: ${isApprovedForAll}`);\n\n    // Check approval for a specific NFT ID (assuming Token ID = 1 exists)\n    const approvedForToken = await contract.getApproved(1);\n    console.log(`✅ Approved Address for Token ID 1: ${approvedForToken}`);\n\n    return { isApprovedForAll, approvedForToken };\n}\n\n/** Function to revoke ERC-721 Approvals */\nexport async function revokeERC721Approval(nftContractAddress, tokenId) {\n    const provider = new BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    \n    const abi = [\"function approve(address to, uint256 tokenId)\", \"function setApprovalForAll(address operator, bool approved)\"];\n    const contract = new Contract(nftContractAddress, abi, signer);\n\n    // ✅ Revoke approval by setting it to the zero address\n    const tx = await contract.approve(ZeroAddress, tokenId);\n    await tx.wait();\n    console.log(`✅ Approval revoked for token ${tokenId}`);\n}\n\n\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,QAAQ,CAAC,CAAC;;AAEjE;AACA,OAAO,eAAeC,kBAAkBA,CAACC,kBAAkB,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EACjF,MAAMC,GAAG,GAAG,CACR,gFAAgF,EAChF,8DAA8D,CACjE;EAED,MAAMC,QAAQ,GAAG,IAAIP,QAAQ,CAACG,kBAAkB,EAAEG,GAAG,EAAED,QAAQ,CAAC;;EAEhE;EACA,MAAMG,kBAAkB,GAAG,4CAA4C,CAAC,CAAC;;EAEzE;EACA,MAAMC,gBAAgB,GAAG,MAAMF,QAAQ,CAACE,gBAAgB,CAACL,YAAY,EAAEI,kBAAkB,CAAC;EAC1FE,OAAO,CAACC,GAAG,CAAC,8BAA8BF,gBAAgB,EAAE,CAAC;;EAE7D;EACA,MAAMG,gBAAgB,GAAG,MAAML,QAAQ,CAACM,WAAW,CAAC,CAAC,CAAC;EACtDH,OAAO,CAACC,GAAG,CAAC,sCAAsCC,gBAAgB,EAAE,CAAC;EAErE,OAAO;IAAEH,gBAAgB;IAAEG;EAAiB,CAAC;AACjD;;AAEA;AACA,OAAO,eAAeE,oBAAoBA,CAACX,kBAAkB,EAAEY,OAAO,EAAE;EACpE,MAAMV,QAAQ,GAAG,IAAIN,eAAe,CAACiB,MAAM,CAACC,QAAQ,CAAC;EACrD,MAAMC,MAAM,GAAG,MAAMb,QAAQ,CAACc,SAAS,CAAC,CAAC;EAEzC,MAAMb,GAAG,GAAG,CAAC,+CAA+C,EAAE,6DAA6D,CAAC;EAC5H,MAAMC,QAAQ,GAAG,IAAIP,QAAQ,CAACG,kBAAkB,EAAEG,GAAG,EAAEY,MAAM,CAAC;;EAE9D;EACA,MAAME,EAAE,GAAG,MAAMb,QAAQ,CAACc,OAAO,CAACpB,WAAW,EAAEc,OAAO,CAAC;EACvD,MAAMK,EAAE,CAACE,IAAI,CAAC,CAAC;EACfZ,OAAO,CAACC,GAAG,CAAC,gCAAgCI,OAAO,EAAE,CAAC;AAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}