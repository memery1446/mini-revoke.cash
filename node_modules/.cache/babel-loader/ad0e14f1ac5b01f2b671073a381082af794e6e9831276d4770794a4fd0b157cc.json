{"ast":null,"code":"import { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Correct import\n\nexport async function getERC1155Approvals(ownerAddress, passedProvider = provider) {\n  if (!ownerAddress) {\n    console.error(\"‚ùå Error: Owner address is undefined!\");\n    return [];\n  }\n  console.log(\"üîç Fetching ERC-1155 Approvals for:\", ownerAddress);\n  const erc1155Contract = new ethers.Contract(CONTRACT_ADDRESSES.ERC1155, ERC1155_ABI, passedProvider);\n  const spender = \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\";\n  try {\n    const isApproved = await erc1155Contract.isApprovedForAll(ownerAddress, spender);\n    console.log(`üîç Approval for ${spender}:`, isApproved);\n    return [{\n      contract: CONTRACT_ADDRESSES.ERC1155,\n      spender,\n      approved: isApproved\n    }];\n  } catch (error) {\n    console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error);\n    return [];\n  }\n}\nexport async function revokeERC1155Approval(userAddress) {\n  try {\n    const provider = getProvider();\n    const signer = provider.getSigner();\n    const contractAddress = CONTRACT_ADDRESSES.TestERC1155;\n    const erc1155 = new ethers.Contract(contractAddress, [\"function setApprovalForAll(address operator, bool approved) external\"], signer);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üõë Revoking ERC-1155 Approval for:\", operatorAddress);\n    const tx = await erc1155.setApprovalForAll(operatorAddress, false);\n    await tx.wait();\n    console.log(\"‚úÖ ERC-1155 Approval Revoked\");\n  } catch (error) {\n    console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n  }\n}\nexport async function batchRevokeERC1155Approvals(userAddresses) {\n  try {\n    for (const userAddress of userAddresses) {\n      await revokeERC1155Approval(userAddress);\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in batch revocation of ERC-1155 approvals:\", error);\n  }\n}","map":{"version":3,"names":["ethers","getProvider","CONTRACT_ADDRESSES","getERC1155Approvals","ownerAddress","passedProvider","provider","console","error","log","erc1155Contract","Contract","ERC1155","ERC1155_ABI","spender","isApproved","isApprovedForAll","contract","approved","revokeERC1155Approval","userAddress","signer","getSigner","contractAddress","TestERC1155","erc1155","operatorAddress","MockSpender","tx","setApprovalForAll","wait","batchRevokeERC1155Approvals","userAddresses"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Correct import\n\nexport async function getERC1155Approvals(ownerAddress, passedProvider = provider) {\n    if (!ownerAddress) {\n        console.error(\"‚ùå Error: Owner address is undefined!\");\n        return [];\n    }\n    console.log(\"üîç Fetching ERC-1155 Approvals for:\", ownerAddress);\n    const erc1155Contract = new ethers.Contract(CONTRACT_ADDRESSES.ERC1155, ERC1155_ABI, passedProvider);\n    const spender = \"0x43c5df0c482c88cef8005389f64c362ee720a5bc\";\n\n    try {\n        const isApproved = await erc1155Contract.isApprovedForAll(ownerAddress, spender);\n        console.log(`üîç Approval for ${spender}:`, isApproved);\n        return [{ contract: CONTRACT_ADDRESSES.ERC1155, spender, approved: isApproved }];\n    } catch (error) {\n        console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error);\n        return [];\n    }\n}\n\nexport async function revokeERC1155Approval(userAddress) {\n    try {\n        const provider = getProvider();\n        const signer = provider.getSigner();\n        const contractAddress = CONTRACT_ADDRESSES.TestERC1155;\n        const erc1155 = new ethers.Contract(contractAddress, [\n            \"function setApprovalForAll(address operator, bool approved) external\"\n        ], signer);\n        \n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üõë Revoking ERC-1155 Approval for:\", operatorAddress);\n        \n        const tx = await erc1155.setApprovalForAll(operatorAddress, false);\n        await tx.wait();\n        console.log(\"‚úÖ ERC-1155 Approval Revoked\");\n    } catch (error) {\n        console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n    }\n}\n\nexport async function batchRevokeERC1155Approvals(userAddresses) {\n    try {\n        for (const userAddress of userAddresses) {\n            await revokeERC1155Approval(userAddress);\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in batch revocation of ERC-1155 approvals:\", error);\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,YAAY,CAAC,CAAC;AACtC,SAASC,kBAAkB,QAAQ,mBAAmB,CAAC,CAAC;;AAExD,OAAO,eAAeC,mBAAmBA,CAACC,YAAY,EAAEC,cAAc,GAAGC,QAAQ,EAAE;EAC/E,IAAI,CAACF,YAAY,EAAE;IACfG,OAAO,CAACC,KAAK,CAAC,sCAAsC,CAAC;IACrD,OAAO,EAAE;EACb;EACAD,OAAO,CAACE,GAAG,CAAC,qCAAqC,EAAEL,YAAY,CAAC;EAChE,MAAMM,eAAe,GAAG,IAAIV,MAAM,CAACW,QAAQ,CAACT,kBAAkB,CAACU,OAAO,EAAEC,WAAW,EAAER,cAAc,CAAC;EACpG,MAAMS,OAAO,GAAG,4CAA4C;EAE5D,IAAI;IACA,MAAMC,UAAU,GAAG,MAAML,eAAe,CAACM,gBAAgB,CAACZ,YAAY,EAAEU,OAAO,CAAC;IAChFP,OAAO,CAACE,GAAG,CAAC,mBAAmBK,OAAO,GAAG,EAAEC,UAAU,CAAC;IACtD,OAAO,CAAC;MAAEE,QAAQ,EAAEf,kBAAkB,CAACU,OAAO;MAAEE,OAAO;MAAEI,QAAQ,EAAEH;IAAW,CAAC,CAAC;EACpF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,EAAE;EACb;AACJ;AAEA,OAAO,eAAeW,qBAAqBA,CAACC,WAAW,EAAE;EACrD,IAAI;IACA,MAAMd,QAAQ,GAAGL,WAAW,CAAC,CAAC;IAC9B,MAAMoB,MAAM,GAAGf,QAAQ,CAACgB,SAAS,CAAC,CAAC;IACnC,MAAMC,eAAe,GAAGrB,kBAAkB,CAACsB,WAAW;IACtD,MAAMC,OAAO,GAAG,IAAIzB,MAAM,CAACW,QAAQ,CAACY,eAAe,EAAE,CACjD,sEAAsE,CACzE,EAAEF,MAAM,CAAC;IAEV,MAAMK,eAAe,GAAGxB,kBAAkB,CAACyB,WAAW;IACtDpB,OAAO,CAACE,GAAG,CAAC,oCAAoC,EAAEiB,eAAe,CAAC;IAElE,MAAME,EAAE,GAAG,MAAMH,OAAO,CAACI,iBAAiB,CAACH,eAAe,EAAE,KAAK,CAAC;IAClE,MAAME,EAAE,CAACE,IAAI,CAAC,CAAC;IACfvB,OAAO,CAACE,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC/D;AACJ;AAEA,OAAO,eAAeuB,2BAA2BA,CAACC,aAAa,EAAE;EAC7D,IAAI;IACA,KAAK,MAAMZ,WAAW,IAAIY,aAAa,EAAE;MACrC,MAAMb,qBAAqB,CAACC,WAAW,CAAC;IAC5C;EACJ,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;EAC9E;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}