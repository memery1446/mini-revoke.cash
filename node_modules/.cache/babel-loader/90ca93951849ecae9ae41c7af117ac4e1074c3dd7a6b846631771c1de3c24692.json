{"ast":null,"code":"// Updated erc1155Approvals.js\nimport { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Fix path\n\nexport async function getERC1155Approvals(userAddress) {\n  try {\n    const provider = getProvider();\n    const signer = provider.getSigner();\n    const nftContractAddress = CONTRACT_ADDRESSES.TestERC1155;\n    const nftContract = new ethers.Contract(nftContractAddress, [\"function isApprovedForAll(address owner, address operator) view returns (bool)\"], signer);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üîç Checking ERC-1155 Approvals for:\", nftContractAddress);\n    console.log(\"üìå Owner Address:\", userAddress);\n    console.log(\"üìå Operator Address:\", operatorAddress);\n    const isApproved = await nftContract.isApprovedForAll(userAddress, operatorAddress);\n    console.log(\"‚úÖ ERC-1155 Approval Status:\", isApproved);\n    return isApproved;\n  } catch (error) {\n    console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error);\n    return false;\n  }\n}\nexport async function revokeERC1155Approval(userAddress) {\n  try {\n    const provider = getProvider();\n    const signer = provider.getSigner();\n    const nftContractAddress = CONTRACT_ADDRESSES.TestERC1155;\n    const nftContract = new ethers.Contract(nftContractAddress, [\"function setApprovalForAll(address operator, bool approved) external\"], signer);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üõë Revoking ERC-1155 Approval for:\", operatorAddress);\n    const tx = await nftContract.setApprovalForAll(operatorAddress, false);\n    await tx.wait();\n    console.log(\"‚úÖ ERC-1155 Approval Revoked\");\n  } catch (error) {\n    console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n  }\n}\nexport async function batchRevokeERC1155Approvals(userAddresses) {\n  try {\n    for (const userAddress of userAddresses) {\n      await revokeERC1155Approval(userAddress);\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in batch revocation of ERC-1155 approvals:\", error);\n  }\n}","map":{"version":3,"names":["ethers","getProvider","CONTRACT_ADDRESSES","getERC1155Approvals","userAddress","provider","signer","getSigner","nftContractAddress","TestERC1155","nftContract","Contract","operatorAddress","MockSpender","console","log","isApproved","isApprovedForAll","error","revokeERC1155Approval","tx","setApprovalForAll","wait","batchRevokeERC1155Approvals","userAddresses"],"sources":["/Users/markemery/mini.revoke/src/utils/erc1155Approvals.js"],"sourcesContent":["// Updated erc1155Approvals.js\nimport { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Fix path\n\n\n\nexport async function getERC1155Approvals(userAddress) {\n    try {\n        const provider = getProvider();\n        const signer = provider.getSigner();\n        const nftContractAddress = CONTRACT_ADDRESSES.TestERC1155;\n        const nftContract = new ethers.Contract(nftContractAddress, [\n            \"function isApprovedForAll(address owner, address operator) view returns (bool)\"\n        ], signer);\n        \n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üîç Checking ERC-1155 Approvals for:\", nftContractAddress);\n        console.log(\"üìå Owner Address:\", userAddress);\n        console.log(\"üìå Operator Address:\", operatorAddress);\n        \n        const isApproved = await nftContract.isApprovedForAll(userAddress, operatorAddress);\n        console.log(\"‚úÖ ERC-1155 Approval Status:\", isApproved);\n        return isApproved;\n    } catch (error) {\n        console.error(\"‚ùå Error fetching ERC-1155 approvals:\", error);\n        return false;\n    }\n}\n\nexport async function revokeERC1155Approval(userAddress) {\n    try {\n        const provider = getProvider();\n        const signer = provider.getSigner();\n        const nftContractAddress = CONTRACT_ADDRESSES.TestERC1155;\n        const nftContract = new ethers.Contract(nftContractAddress, [\n            \"function setApprovalForAll(address operator, bool approved) external\"\n        ], signer);\n        \n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üõë Revoking ERC-1155 Approval for:\", operatorAddress);\n        \n        const tx = await nftContract.setApprovalForAll(operatorAddress, false);\n        await tx.wait();\n        console.log(\"‚úÖ ERC-1155 Approval Revoked\");\n    } catch (error) {\n        console.error(\"‚ùå Error revoking ERC-1155 approval:\", error);\n    }\n}\n\nexport async function batchRevokeERC1155Approvals(userAddresses) {\n    try {\n        for (const userAddress of userAddresses) {\n            await revokeERC1155Approval(userAddress);\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in batch revocation of ERC-1155 approvals:\", error);\n    }\n}\n\n\n"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,YAAY,CAAC,CAAC;AACtC,SAASC,kBAAkB,QAAQ,mBAAmB,CAAC,CAAC;;AAIxD,OAAO,eAAeC,mBAAmBA,CAACC,WAAW,EAAE;EACnD,IAAI;IACA,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;IAC9B,MAAMK,MAAM,GAAGD,QAAQ,CAACE,SAAS,CAAC,CAAC;IACnC,MAAMC,kBAAkB,GAAGN,kBAAkB,CAACO,WAAW;IACzD,MAAMC,WAAW,GAAG,IAAIV,MAAM,CAACW,QAAQ,CAACH,kBAAkB,EAAE,CACxD,gFAAgF,CACnF,EAAEF,MAAM,CAAC;IAEV,MAAMM,eAAe,GAAGV,kBAAkB,CAACW,WAAW;IACtDC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEP,kBAAkB,CAAC;IACtEM,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEX,WAAW,CAAC;IAC7CU,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,eAAe,CAAC;IAEpD,MAAMI,UAAU,GAAG,MAAMN,WAAW,CAACO,gBAAgB,CAACb,WAAW,EAAEQ,eAAe,CAAC;IACnFE,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEC,UAAU,CAAC;IACtD,OAAOA,UAAU;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,KAAK;EAChB;AACJ;AAEA,OAAO,eAAeC,qBAAqBA,CAACf,WAAW,EAAE;EACrD,IAAI;IACA,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;IAC9B,MAAMK,MAAM,GAAGD,QAAQ,CAACE,SAAS,CAAC,CAAC;IACnC,MAAMC,kBAAkB,GAAGN,kBAAkB,CAACO,WAAW;IACzD,MAAMC,WAAW,GAAG,IAAIV,MAAM,CAACW,QAAQ,CAACH,kBAAkB,EAAE,CACxD,sEAAsE,CACzE,EAAEF,MAAM,CAAC;IAEV,MAAMM,eAAe,GAAGV,kBAAkB,CAACW,WAAW;IACtDC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,eAAe,CAAC;IAElE,MAAMQ,EAAE,GAAG,MAAMV,WAAW,CAACW,iBAAiB,CAACT,eAAe,EAAE,KAAK,CAAC;IACtE,MAAMQ,EAAE,CAACE,IAAI,CAAC,CAAC;IACfR,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC/D;AACJ;AAEA,OAAO,eAAeK,2BAA2BA,CAACC,aAAa,EAAE;EAC7D,IAAI;IACA,KAAK,MAAMpB,WAAW,IAAIoB,aAAa,EAAE;MACrC,MAAML,qBAAqB,CAACf,WAAW,CAAC;IAC5C;EACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;EAC9E;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}