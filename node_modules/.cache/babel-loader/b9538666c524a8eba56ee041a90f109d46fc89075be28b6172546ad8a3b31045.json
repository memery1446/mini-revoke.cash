{"ast":null,"code":"import { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Correct import\n\nexport async function getERC721Approvals(userAddress, tokenId = 1) {\n  try {\n    const provider = getProvider();\n    const contractAddress = CONTRACT_ADDRESSES.TestNFT;\n    console.log(\"üîç Fetching ERC-721 approvals for contract:\", contractAddress);\n    if (!contractAddress || contractAddress === \"0x0000000000000000000000000000000000000000\") {\n      throw new Error(\"üö® Invalid ERC-721 contract address!\");\n    }\n    const contract = new ethers.Contract(contractAddress, [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function getApproved(uint256 tokenId) view returns (address)\"], provider);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üìå Checking approval for operator:\", operatorAddress);\n    let isApproved = false;\n    try {\n      isApproved = await contract.isApprovedForAll(userAddress, operatorAddress);\n    } catch (error) {\n      console.warn(\"‚ö†Ô∏è isApprovedForAll call failed, likely due to no approvals set.\");\n    }\n    let specificApproval = \"0x0000000000000000000000000000000000000000\";\n    try {\n      specificApproval = await contract.getApproved(tokenId);\n    } catch (error) {\n      console.warn(\"‚ö†Ô∏è getApproved call failed, possibly no approval set for token ID:\", tokenId);\n    }\n    console.log(\"‚úÖ ERC-721 Approval Status:\", isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\");\n    return isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\";\n  } catch (error) {\n    console.error(\"‚ùå Error fetching ERC-721 approvals:\", error.message);\n    return false;\n  }\n}\nexport async function revokeERC721Approval(userAddress) {\n  try {\n    const provider = getProvider();\n    const signer = provider.getSigner();\n    const contractAddress = CONTRACT_ADDRESSES.TestNFT;\n    const nftContract = new ethers.Contract(contractAddress, [\"function setApprovalForAll(address operator, bool approved) external\"], signer);\n    const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n    console.log(\"üõë Revoking ERC-721 Approval for:\", operatorAddress);\n    const tx = await nftContract.setApprovalForAll(operatorAddress, false);\n    await tx.wait();\n    console.log(\"‚úÖ ERC-721 Approval Revoked\");\n  } catch (error) {\n    console.error(\"‚ùå Error revoking ERC-721 approval:\", error);\n  }\n}\nexport async function batchRevokeERC721Approvals(userAddresses) {\n  try {\n    for (const userAddress of userAddresses) {\n      await revokeERC721Approval(userAddress);\n    }\n  } catch (error) {\n    console.error(\"‚ùå Error in batch revocation of ERC-721 approvals:\", error);\n  }\n}","map":{"version":3,"names":["ethers","getProvider","CONTRACT_ADDRESSES","getERC721Approvals","userAddress","tokenId","provider","contractAddress","TestNFT","console","log","Error","contract","Contract","operatorAddress","MockSpender","isApproved","isApprovedForAll","error","warn","specificApproval","getApproved","message","revokeERC721Approval","signer","getSigner","nftContract","tx","setApprovalForAll","wait","batchRevokeERC721Approvals","userAddresses"],"sources":["/Users/markemery/mini.revoke/src/utils/nftApprovals.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport getProvider from \"./provider\"; // Ensure provider.js exists in utils\nimport { CONTRACT_ADDRESSES } from \"../constants/abis\"; // ‚úÖ Correct import\n\nexport async function getERC721Approvals(userAddress, tokenId = 1) {\n    try {\n        const provider = getProvider();\n        const contractAddress = CONTRACT_ADDRESSES.TestNFT;\n\n        console.log(\"üîç Fetching ERC-721 approvals for contract:\", contractAddress);\n\n        if (!contractAddress || contractAddress === \"0x0000000000000000000000000000000000000000\") {\n            throw new Error(\"üö® Invalid ERC-721 contract address!\");\n        }\n\n        const contract = new ethers.Contract(\n            contractAddress,\n            [\n                \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n                \"function getApproved(uint256 tokenId) view returns (address)\"\n            ],\n            provider\n        );\n\n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üìå Checking approval for operator:\", operatorAddress);\n\n        let isApproved = false;\n        try {\n            isApproved = await contract.isApprovedForAll(userAddress, operatorAddress);\n        } catch (error) {\n            console.warn(\"‚ö†Ô∏è isApprovedForAll call failed, likely due to no approvals set.\");\n        }\n\n        let specificApproval = \"0x0000000000000000000000000000000000000000\";\n        try {\n            specificApproval = await contract.getApproved(tokenId);\n        } catch (error) {\n            console.warn(\"‚ö†Ô∏è getApproved call failed, possibly no approval set for token ID:\", tokenId);\n        }\n\n        console.log(\"‚úÖ ERC-721 Approval Status:\", isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\");\n        return isApproved || specificApproval !== \"0x0000000000000000000000000000000000000000\";\n    } catch (error) {\n        console.error(\"‚ùå Error fetching ERC-721 approvals:\", error.message);\n        return false;\n    }\n}\n\nexport async function revokeERC721Approval(userAddress) {\n    try {\n        const provider = getProvider();\n        const signer = provider.getSigner();\n        const contractAddress = CONTRACT_ADDRESSES.TestNFT;\n        const nftContract = new ethers.Contract(contractAddress, [\n            \"function setApprovalForAll(address operator, bool approved) external\"\n        ], signer);\n        \n        const operatorAddress = CONTRACT_ADDRESSES.MockSpender;\n        console.log(\"üõë Revoking ERC-721 Approval for:\", operatorAddress);\n        \n        const tx = await nftContract.setApprovalForAll(operatorAddress, false);\n        await tx.wait();\n        console.log(\"‚úÖ ERC-721 Approval Revoked\");\n    } catch (error) {\n        console.error(\"‚ùå Error revoking ERC-721 approval:\", error);\n    }\n}\n\nexport async function batchRevokeERC721Approvals(userAddresses) {\n    try {\n        for (const userAddress of userAddresses) {\n            await revokeERC721Approval(userAddress);\n        }\n    } catch (error) {\n        console.error(\"‚ùå Error in batch revocation of ERC-721 approvals:\", error);\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}