{"ast":null,"code":"var _jsxFileName = \"/Users/markemery/mini.revoke/src/components/NFTApprovals.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NFTApprovals = ({\n  contractAddress\n}) => {\n  _s();\n  const [approvals, setApprovals] = useState(null);\n  useEffect(() => {\n    if (contractAddress && window.ethereum) {\n      fetchApprovals();\n    }\n  }, [contractAddress]);\n  const fetchApprovals = async () => {\n    try {\n      console.log(\"üîç Fetching NFT approvals for contract:\", contractAddress);\n      if (!contractAddress) throw new Error(\"‚ùå Contract address is missing!\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const abi = [\"function isApprovedForAll(address owner, address operator) view returns (bool)\", \"function getApproved(uint256 tokenId) view returns (address)\"];\n      const contract = new ethers.Contract(contractAddress, abi, signer);\n      console.log(\"Checking isApprovedForAll for:\", owner, spender);\n      const isApprovedForAll = await contract.isApprovedForAll(await signer.getAddress(), \"0x0000000000000000000000000000000000000000\");\n      console.log(\"‚úÖ NFT Approvals:\", isApprovedForAll);\n      setApprovals(isApprovedForAll);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching approvals:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"NFT Approvals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: approvals !== null ? `Approved: ${approvals}` : \"Fetching...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(NFTApprovals, \"CZiEPxUnFzh4w/Y4T3BlEBvC5Kw=\");\n_c = NFTApprovals;\nexport default NFTApprovals;\nvar _c;\n$RefreshReg$(_c, \"NFTApprovals\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","NFTApprovals","contractAddress","_s","approvals","setApprovals","window","ethereum","fetchApprovals","console","log","Error","provider","providers","Web3Provider","signer","getSigner","abi","contract","Contract","owner","spender","isApprovedForAll","getAddress","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markemery/mini.revoke/src/components/NFTApprovals.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst NFTApprovals = ({ contractAddress }) => {\n  const [approvals, setApprovals] = useState(null);\n\n  useEffect(() => {\n    if (contractAddress && window.ethereum) {\n      fetchApprovals();\n    }\n  }, [contractAddress]);\n\n  const fetchApprovals = async () => {\n    try {\n      console.log(\"üîç Fetching NFT approvals for contract:\", contractAddress);\n      if (!contractAddress) throw new Error(\"‚ùå Contract address is missing!\");\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const abi = [\n        \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n        \"function getApproved(uint256 tokenId) view returns (address)\",\n      ];\n      const contract = new ethers.Contract(contractAddress, abi, signer);\nconsole.log(\"Checking isApprovedForAll for:\", owner, spender);\n\n      const isApprovedForAll = await contract.isApprovedForAll(\n        await signer.getAddress(),\n        \"0x0000000000000000000000000000000000000000\"\n      );\n\n      console.log(\"‚úÖ NFT Approvals:\", isApprovedForAll);\n      setApprovals(isApprovedForAll);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching approvals:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h3>NFT Approvals</h3>\n      <p>{approvals !== null ? `Approved: ${approvals}` : \"Fetching...\"}</p>\n    </div>\n  );\n};\n\nexport default NFTApprovals;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,IAAIK,eAAe,IAAII,MAAM,CAACC,QAAQ,EAAE;MACtCC,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACN,eAAe,CAAC,CAAC;EAErB,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAER,eAAe,CAAC;MACvE,IAAI,CAACA,eAAe,EAAE,MAAM,IAAIS,KAAK,CAAC,gCAAgC,CAAC;MAEvE,MAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,SAAS,CAACC,YAAY,CAACR,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMQ,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;MACnC,MAAMC,GAAG,GAAG,CACV,gFAAgF,EAChF,8DAA8D,CAC/D;MACD,MAAMC,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,QAAQ,CAACjB,eAAe,EAAEe,GAAG,EAAEF,MAAM,CAAC;MACxEN,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEU,KAAK,EAAEC,OAAO,CAAC;MAEvD,MAAMC,gBAAgB,GAAG,MAAMJ,QAAQ,CAACI,gBAAgB,CACtD,MAAMP,MAAM,CAACQ,UAAU,CAAC,CAAC,EACzB,4CACF,CAAC;MAEDd,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEY,gBAAgB,CAAC;MACjDjB,YAAY,CAACiB,gBAAgB,CAAC;IAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,oBACExB,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB7B,OAAA;MAAAyB,QAAA,EAAIrB,SAAS,KAAK,IAAI,GAAG,aAAaA,SAAS,EAAE,GAAG;IAAa;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAzCIF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA2ClB,eAAeA,YAAY;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}