{"ast":null,"code":"var _jsxFileName = \"/Users/markemery/mini.revoke/src/components/WalletConnect.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Button } from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAccount, setNetwork } from \"../store/web3Slice\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(\"‚úÖ WalletConnect.js file has loaded\");\nconst WalletConnect = () => {\n  _s();\n  const dispatch = useDispatch();\n  const account = useSelector(state => state.web3.account);\n  console.log(\"üîç Current account in Redux:\", account); // ‚úÖ LOGGING REDUX STATE\n\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"MetaMask is required.\");\n      return;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n      console.log(\"‚úÖ Wallet connected:\", address);\n      console.log(\"üîÑ Dispatching to Redux...\");\n      dispatch(setAccount(address));\n      dispatch(setNetwork(network.chainId));\n      console.log(\"‚úÖ Redux should now have account:\", address);\n    } catch (error) {\n      console.error(\"‚ùå Connection error:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    colorScheme: \"teal\",\n    onClick: connectWallet,\n    children: account ? `Connected: ${account}` : \"Connect Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletConnect, \"Y2uKqTUCzIZlW0wNfSnPSNwl2R0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","Button","useDispatch","useSelector","setAccount","setNetwork","ethers","jsxDEV","_jsxDEV","console","log","WalletConnect","_s","dispatch","account","state","web3","connectWallet","window","ethereum","alert","provider","providers","Web3Provider","send","signer","getSigner","address","getAddress","network","getNetwork","chainId","error","colorScheme","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/markemery/mini.revoke/src/components/WalletConnect.js"],"sourcesContent":["import React from \"react\";\nimport { Button } from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAccount, setNetwork } from \"../store/web3Slice\";\nimport { ethers } from \"ethers\";\n\nconsole.log(\"‚úÖ WalletConnect.js file has loaded\");\n\nconst WalletConnect = () => {\n  const dispatch = useDispatch();\n  const account = useSelector((state) => state.web3.account);\n\n  console.log(\"üîç Current account in Redux:\", account); // ‚úÖ LOGGING REDUX STATE\n\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"MetaMask is required.\");\n      return;\n    }\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n\n      console.log(\"‚úÖ Wallet connected:\", address);\n      console.log(\"üîÑ Dispatching to Redux...\");\n\n      dispatch(setAccount(address));\n      dispatch(setNetwork(network.chainId));\n\n      console.log(\"‚úÖ Redux should now have account:\", address);\n    } catch (error) {\n      console.error(\"‚ùå Connection error:\", error);\n    }\n  };\n\n  return (\n    <Button colorScheme=\"teal\" onClick={connectWallet}>\n      {account ? `Connected: ${account}` : \"Connect Wallet\"}\n    </Button>\n  );\n};\n\nexport default WalletConnect;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,EAAEC,UAAU,QAAQ,oBAAoB;AAC3D,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhCC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;AAEjD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,OAAO,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,OAAO,CAAC;EAE1DL,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEI,OAAO,CAAC,CAAC,CAAC;;EAEtD,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;MACpBC,KAAK,CAAC,uBAAuB,CAAC;MAC9B;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIf,MAAM,CAACgB,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAME,QAAQ,CAACG,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC9C,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,SAAS,CAAC,CAAC;MACnC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;MACzC,MAAMC,OAAO,GAAG,MAAMR,QAAQ,CAACS,UAAU,CAAC,CAAC;MAE3CrB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEiB,OAAO,CAAC;MAC3ClB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MAEzCG,QAAQ,CAACT,UAAU,CAACuB,OAAO,CAAC,CAAC;MAC7Bd,QAAQ,CAACR,UAAU,CAACwB,OAAO,CAACE,OAAO,CAAC,CAAC;MAErCtB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEiB,OAAO,CAAC;IAC1D,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,oBACExB,OAAA,CAACP,MAAM;IAACgC,WAAW,EAAC,MAAM;IAACC,OAAO,EAAEjB,aAAc;IAAAkB,QAAA,EAC/CrB,OAAO,GAAG,cAAcA,OAAO,EAAE,GAAG;EAAgB;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEb,CAAC;AAAC3B,EAAA,CApCID,aAAa;EAAA,QACAT,WAAW,EACZC,WAAW;AAAA;AAAAqC,EAAA,GAFvB7B,aAAa;AAsCnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}