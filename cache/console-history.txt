.exit
console.log("TK2 initial allowance:", tk2Allowance.toString());
const tk2Allowance = await tk2.allowance(walletAddress, spenderAddress);
const tk2 = new ethers.Contract(tk2Address, tokenABI, wallet);
const tk2Address = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
console.log("Allowance after revoke:", afterRevokeAllowance.toString());
const afterRevokeAllowance = await tk1.allowance(walletAddress, spenderAddress);
await revokeTx.wait();
const revokeTx = await tk1.approve(spenderAddress, 0);
console.log("New allowance in tokens:", ethers.formatUnits(newAllowance, 18));
console.log("New allowance:", newAllowance.toString());
const newAllowance = await tk1.allowance(walletAddress, spenderAddress);
await approveTx.wait();
const approveTx = await tk1.approve(spenderAddress, approveAmount);
const approveAmount = ethers.parseUnits("100", 18);  // 100 tokens
console.log("Current allowance:", currentAllowance.toString());
const currentAllowance = await tk1.allowance(walletAddress, spenderAddress);
const walletAddress = await wallet.getAddress();
const spenderAddress = "0x70997970C51812dc3A010C7d01b50e0d17dc79C8";  // Test account
const tk1 = new ethers.Contract(tk1Address, tokenABI, wallet);
const tk1Address = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
];
  "function allowance(address owner, address spender) view returns (uint256)"
  "function approve(address spender, uint256 amount) public returns (bool)",
const tokenABI = [
const wallet = new ethers.Wallet(privateKey, provider);
const privateKey = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80';
const provider = new ethers.JsonRpcProvider('http://localhost:8545');
const { ethers } = require('ethers');
.exit
const { ethers } = require('ethers');
const provider = new ethers.JsonRpcProvider('http://localhost:8545');
const { ethers } = require('ethers');
const provider = new BrowserProvider(window.ethereum);
import { BrowserProvider, Contract } from "ethers";